/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.15.8
 * source: trade.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export declare namespace md {
    enum Side {
        BID = 0,
        ASK = 1
    }
    enum KlineInterval {
        S1 = 0,
        M1 = 1,
        M15 = 2,
        H1 = 3,
        H4 = 4,
        D1 = 5
    }
    enum RateUpdateSide {
        BASE = 0,
        QUOTE = 1
    }
    class MdMessage extends pb_1.Message {
        #private;
        constructor(data?: any[] | ({} & (({
            heartbeat?: Heartbeat;
            summary?: never;
            trades?: never;
            mboSnapshot?: never;
            mboDiff?: never;
            mbpSnapshot?: never;
            mbpDiff?: never;
            kline?: never;
        } | {
            heartbeat?: never;
            summary?: Summary;
            trades?: never;
            mboSnapshot?: never;
            mboDiff?: never;
            mbpSnapshot?: never;
            mbpDiff?: never;
            kline?: never;
        } | {
            heartbeat?: never;
            summary?: never;
            trades?: Trades;
            mboSnapshot?: never;
            mboDiff?: never;
            mbpSnapshot?: never;
            mbpDiff?: never;
            kline?: never;
        } | {
            heartbeat?: never;
            summary?: never;
            trades?: never;
            mboSnapshot?: MarketByOrder;
            mboDiff?: never;
            mbpSnapshot?: never;
            mbpDiff?: never;
            kline?: never;
        } | {
            heartbeat?: never;
            summary?: never;
            trades?: never;
            mboSnapshot?: never;
            mboDiff?: MarketByOrderDiff;
            mbpSnapshot?: never;
            mbpDiff?: never;
            kline?: never;
        } | {
            heartbeat?: never;
            summary?: never;
            trades?: never;
            mboSnapshot?: never;
            mboDiff?: never;
            mbpSnapshot?: MarketByPrice;
            mbpDiff?: never;
            kline?: never;
        } | {
            heartbeat?: never;
            summary?: never;
            trades?: never;
            mboSnapshot?: never;
            mboDiff?: never;
            mbpSnapshot?: never;
            mbpDiff?: MarketByPriceDiff;
            kline?: never;
        } | {
            heartbeat?: never;
            summary?: never;
            trades?: never;
            mboSnapshot?: never;
            mboDiff?: never;
            mbpSnapshot?: never;
            mbpDiff?: never;
            kline?: Kline;
        }))));
        get heartbeat(): Heartbeat;
        set heartbeat(value: Heartbeat);
        get has_heartbeat(): boolean;
        get summary(): Summary;
        set summary(value: Summary);
        get has_summary(): boolean;
        get trades(): Trades;
        set trades(value: Trades);
        get has_trades(): boolean;
        get mboSnapshot(): MarketByOrder;
        set mboSnapshot(value: MarketByOrder);
        get has_mboSnapshot(): boolean;
        get mboDiff(): MarketByOrderDiff;
        set mboDiff(value: MarketByOrderDiff);
        get has_mboDiff(): boolean;
        get mbpSnapshot(): MarketByPrice;
        set mbpSnapshot(value: MarketByPrice);
        get has_mbpSnapshot(): boolean;
        get mbpDiff(): MarketByPriceDiff;
        set mbpDiff(value: MarketByPriceDiff);
        get has_mbpDiff(): boolean;
        get kline(): Kline;
        set kline(value: Kline);
        get has_kline(): boolean;
        get inner(): "trades" | "kline" | "none" | "heartbeat" | "summary" | "mboSnapshot" | "mboDiff" | "mbpSnapshot" | "mbpDiff";
        static fromObject(data: {
            heartbeat?: ReturnType<typeof Heartbeat.prototype.toObject>;
            summary?: ReturnType<typeof Summary.prototype.toObject>;
            trades?: ReturnType<typeof Trades.prototype.toObject>;
            mboSnapshot?: ReturnType<typeof MarketByOrder.prototype.toObject>;
            mboDiff?: ReturnType<typeof MarketByOrderDiff.prototype.toObject>;
            mbpSnapshot?: ReturnType<typeof MarketByPrice.prototype.toObject>;
            mbpDiff?: ReturnType<typeof MarketByPriceDiff.prototype.toObject>;
            kline?: ReturnType<typeof Kline.prototype.toObject>;
        }): MdMessage;
        toObject(): {
            heartbeat?: ReturnType<typeof Heartbeat.prototype.toObject>;
            summary?: ReturnType<typeof Summary.prototype.toObject>;
            trades?: ReturnType<typeof Trades.prototype.toObject>;
            mboSnapshot?: ReturnType<typeof MarketByOrder.prototype.toObject>;
            mboDiff?: ReturnType<typeof MarketByOrderDiff.prototype.toObject>;
            mbpSnapshot?: ReturnType<typeof MarketByPrice.prototype.toObject>;
            mbpDiff?: ReturnType<typeof MarketByPriceDiff.prototype.toObject>;
            kline?: ReturnType<typeof Kline.prototype.toObject>;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MdMessage;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): MdMessage;
    }
    class MarketByPrice extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            levels?: MarketByPrice.Level[];
            chunk?: number;
            numChunks?: number;
        });
        get levels(): MarketByPrice.Level[];
        set levels(value: MarketByPrice.Level[]);
        get chunk(): number;
        set chunk(value: number);
        get numChunks(): number;
        set numChunks(value: number);
        static fromObject(data: {
            levels?: ReturnType<typeof MarketByPrice.Level.prototype.toObject>[];
            chunk?: number;
            numChunks?: number;
        }): MarketByPrice;
        toObject(): {
            levels?: ReturnType<typeof MarketByPrice.Level.prototype.toObject>[];
            chunk?: number;
            numChunks?: number;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MarketByPrice;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): MarketByPrice;
    }
    namespace MarketByPrice {
        class Level extends pb_1.Message {
            #private;
            constructor(data?: any[] | {
                price?: number;
                quantity?: number;
                side?: Side;
            });
            get price(): number;
            set price(value: number);
            get quantity(): number;
            set quantity(value: number);
            get side(): Side;
            set side(value: Side);
            static fromObject(data: {
                price?: number;
                quantity?: number;
                side?: Side;
            }): Level;
            toObject(): {
                price?: number;
                quantity?: number;
                side?: Side;
            };
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Level;
            serializeBinary(): Uint8Array;
            static deserializeBinary(bytes: Uint8Array): Level;
        }
    }
    class MarketByPriceDiff extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            diffs?: MarketByPriceDiff.Diff[];
            totalBidLevels?: number;
            totalAskLevels?: number;
        });
        get diffs(): MarketByPriceDiff.Diff[];
        set diffs(value: MarketByPriceDiff.Diff[]);
        get totalBidLevels(): number;
        set totalBidLevels(value: number);
        get totalAskLevels(): number;
        set totalAskLevels(value: number);
        static fromObject(data: {
            diffs?: ReturnType<typeof MarketByPriceDiff.Diff.prototype.toObject>[];
            totalBidLevels?: number;
            totalAskLevels?: number;
        }): MarketByPriceDiff;
        toObject(): {
            diffs?: ReturnType<typeof MarketByPriceDiff.Diff.prototype.toObject>[];
            totalBidLevels?: number;
            totalAskLevels?: number;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MarketByPriceDiff;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): MarketByPriceDiff;
    }
    namespace MarketByPriceDiff {
        enum DiffOp {
            ADD = 0,
            REMOVE = 1,
            REPLACE = 2
        }
        class Diff extends pb_1.Message {
            #private;
            constructor(data?: any[] | {
                price?: number;
                quantity?: number;
                side?: Side;
                op?: MarketByPriceDiff.DiffOp;
            });
            get price(): number;
            set price(value: number);
            get quantity(): number;
            set quantity(value: number);
            get side(): Side;
            set side(value: Side);
            get op(): MarketByPriceDiff.DiffOp;
            set op(value: MarketByPriceDiff.DiffOp);
            static fromObject(data: {
                price?: number;
                quantity?: number;
                side?: Side;
                op?: MarketByPriceDiff.DiffOp;
            }): Diff;
            toObject(): {
                price?: number;
                quantity?: number;
                side?: Side;
                op?: MarketByPriceDiff.DiffOp;
            };
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Diff;
            serializeBinary(): Uint8Array;
            static deserializeBinary(bytes: Uint8Array): Diff;
        }
    }
    class MarketByOrder extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            orders?: MarketByOrder.Order[];
            chunk?: number;
            numChunks?: number;
        });
        get orders(): MarketByOrder.Order[];
        set orders(value: MarketByOrder.Order[]);
        get chunk(): number;
        set chunk(value: number);
        get numChunks(): number;
        set numChunks(value: number);
        static fromObject(data: {
            orders?: ReturnType<typeof MarketByOrder.Order.prototype.toObject>[];
            chunk?: number;
            numChunks?: number;
        }): MarketByOrder;
        toObject(): {
            orders?: ReturnType<typeof MarketByOrder.Order.prototype.toObject>[];
            chunk?: number;
            numChunks?: number;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MarketByOrder;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): MarketByOrder;
    }
    namespace MarketByOrder {
        class Order extends pb_1.Message {
            #private;
            constructor(data?: any[] | {
                price?: number;
                quantity?: number;
                exchangeOrderId?: number;
                side?: Side;
            });
            get price(): number;
            set price(value: number);
            get quantity(): number;
            set quantity(value: number);
            get exchangeOrderId(): number;
            set exchangeOrderId(value: number);
            get side(): Side;
            set side(value: Side);
            static fromObject(data: {
                price?: number;
                quantity?: number;
                exchangeOrderId?: number;
                side?: Side;
            }): Order;
            toObject(): {
                price?: number;
                quantity?: number;
                exchangeOrderId?: number;
                side?: Side;
            };
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Order;
            serializeBinary(): Uint8Array;
            static deserializeBinary(bytes: Uint8Array): Order;
        }
    }
    class MarketByOrderDiff extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            diffs?: MarketByOrderDiff.Diff[];
            totalBidLevels?: number;
            totalAskLevels?: number;
            totalBidOrders?: number;
            totalAskOrders?: number;
        });
        get diffs(): MarketByOrderDiff.Diff[];
        set diffs(value: MarketByOrderDiff.Diff[]);
        get totalBidLevels(): number;
        set totalBidLevels(value: number);
        get totalAskLevels(): number;
        set totalAskLevels(value: number);
        get totalBidOrders(): number;
        set totalBidOrders(value: number);
        get totalAskOrders(): number;
        set totalAskOrders(value: number);
        static fromObject(data: {
            diffs?: ReturnType<typeof MarketByOrderDiff.Diff.prototype.toObject>[];
            totalBidLevels?: number;
            totalAskLevels?: number;
            totalBidOrders?: number;
            totalAskOrders?: number;
        }): MarketByOrderDiff;
        toObject(): {
            diffs?: ReturnType<typeof MarketByOrderDiff.Diff.prototype.toObject>[];
            totalBidLevels?: number;
            totalAskLevels?: number;
            totalBidOrders?: number;
            totalAskOrders?: number;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MarketByOrderDiff;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): MarketByOrderDiff;
    }
    namespace MarketByOrderDiff {
        enum DiffOp {
            ADD = 0,
            REMOVE = 1,
            REPLACE = 2
        }
        class Diff extends pb_1.Message {
            #private;
            constructor(data?: any[] | {
                price?: number;
                quantity?: number;
                exchangeOrderId?: number;
                side?: Side;
                op?: MarketByOrderDiff.DiffOp;
            });
            get price(): number;
            set price(value: number);
            get quantity(): number;
            set quantity(value: number);
            get exchangeOrderId(): number;
            set exchangeOrderId(value: number);
            get side(): Side;
            set side(value: Side);
            get op(): MarketByOrderDiff.DiffOp;
            set op(value: MarketByOrderDiff.DiffOp);
            static fromObject(data: {
                price?: number;
                quantity?: number;
                exchangeOrderId?: number;
                side?: Side;
                op?: MarketByOrderDiff.DiffOp;
            }): Diff;
            toObject(): {
                price?: number;
                quantity?: number;
                exchangeOrderId?: number;
                side?: Side;
                op?: MarketByOrderDiff.DiffOp;
            };
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Diff;
            serializeBinary(): Uint8Array;
            static deserializeBinary(bytes: Uint8Array): Diff;
        }
    }
    class Trades extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            trades?: Trades.Trade[];
        });
        get trades(): Trades.Trade[];
        set trades(value: Trades.Trade[]);
        static fromObject(data: {
            trades?: ReturnType<typeof Trades.Trade.prototype.toObject>[];
        }): Trades;
        toObject(): {
            trades?: ReturnType<typeof Trades.Trade.prototype.toObject>[];
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Trades;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): Trades;
    }
    namespace Trades {
        class Trade extends pb_1.Message {
            #private;
            constructor(data?: any[] | {
                tradeId?: number;
                price?: number;
                aggressingSide?: Side;
                restingExchangeOrderId?: number;
                fillQuantity?: number;
                transactTime?: number;
                aggressingExchangeOrderId?: number;
            });
            get tradeId(): number;
            set tradeId(value: number);
            get price(): number;
            set price(value: number);
            get aggressingSide(): Side;
            set aggressingSide(value: Side);
            get restingExchangeOrderId(): number;
            set restingExchangeOrderId(value: number);
            get fillQuantity(): number;
            set fillQuantity(value: number);
            get transactTime(): number;
            set transactTime(value: number);
            get aggressingExchangeOrderId(): number;
            set aggressingExchangeOrderId(value: number);
            static fromObject(data: {
                tradeId?: number;
                price?: number;
                aggressingSide?: Side;
                restingExchangeOrderId?: number;
                fillQuantity?: number;
                transactTime?: number;
                aggressingExchangeOrderId?: number;
            }): Trade;
            toObject(): {
                tradeId?: number;
                price?: number;
                aggressingSide?: Side;
                restingExchangeOrderId?: number;
                fillQuantity?: number;
                transactTime?: number;
                aggressingExchangeOrderId?: number;
            };
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Trade;
            serializeBinary(): Uint8Array;
            static deserializeBinary(bytes: Uint8Array): Trade;
        }
    }
    class Summary extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            open?: number;
            close?: number;
            low?: number;
            high?: number;
            baseVolumeLo?: number;
            baseVolumeHi?: number;
            quoteVolumeLo?: number;
            quoteVolumeHi?: number;
        });
        get open(): number;
        set open(value: number);
        get close(): number;
        set close(value: number);
        get low(): number;
        set low(value: number);
        get high(): number;
        set high(value: number);
        get baseVolumeLo(): number;
        set baseVolumeLo(value: number);
        get baseVolumeHi(): number;
        set baseVolumeHi(value: number);
        get quoteVolumeLo(): number;
        set quoteVolumeLo(value: number);
        get quoteVolumeHi(): number;
        set quoteVolumeHi(value: number);
        static fromObject(data: {
            open?: number;
            close?: number;
            low?: number;
            high?: number;
            baseVolumeLo?: number;
            baseVolumeHi?: number;
            quoteVolumeLo?: number;
            quoteVolumeHi?: number;
        }): Summary;
        toObject(): {
            open?: number;
            close?: number;
            low?: number;
            high?: number;
            baseVolumeLo?: number;
            baseVolumeHi?: number;
            quoteVolumeLo?: number;
            quoteVolumeHi?: number;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Summary;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): Summary;
    }
    class Kline extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            interval?: KlineInterval;
            startTime?: number;
            open?: number;
            close?: number;
            high?: number;
            low?: number;
            volumeLo?: number;
            volumeHi?: number;
        });
        get interval(): KlineInterval;
        set interval(value: KlineInterval);
        get startTime(): number;
        set startTime(value: number);
        get open(): number;
        set open(value: number);
        get close(): number;
        set close(value: number);
        get high(): number;
        set high(value: number);
        get low(): number;
        set low(value: number);
        get volumeLo(): number;
        set volumeLo(value: number);
        get volumeHi(): number;
        set volumeHi(value: number);
        static fromObject(data: {
            interval?: KlineInterval;
            startTime?: number;
            open?: number;
            close?: number;
            high?: number;
            low?: number;
            volumeLo?: number;
            volumeHi?: number;
        }): Kline;
        toObject(): {
            interval?: KlineInterval;
            startTime?: number;
            open?: number;
            close?: number;
            high?: number;
            low?: number;
            volumeLo?: number;
            volumeHi?: number;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Kline;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): Kline;
    }
    class Heartbeat extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            requestId?: number;
            timestamp?: number;
        });
        get requestId(): number;
        set requestId(value: number);
        get timestamp(): number;
        set timestamp(value: number);
        static fromObject(data: {
            requestId?: number;
            timestamp?: number;
        }): Heartbeat;
        toObject(): {
            requestId?: number;
            timestamp?: number;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Heartbeat;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): Heartbeat;
    }
    class MdMessages extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            messages?: MdMessage[];
        });
        get messages(): MdMessage[];
        set messages(value: MdMessage[]);
        static fromObject(data: {
            messages?: ReturnType<typeof MdMessage.prototype.toObject>[];
        }): MdMessages;
        toObject(): {
            messages?: ReturnType<typeof MdMessage.prototype.toObject>[];
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MdMessages;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): MdMessages;
    }
    class AggMessage extends pb_1.Message {
        #private;
        constructor(data?: any[] | ({} & (({
            heartbeat?: Heartbeat;
            topOfBooks?: never;
            rateUpdates?: never;
        } | {
            heartbeat?: never;
            topOfBooks?: TopOfBooks;
            rateUpdates?: never;
        } | {
            heartbeat?: never;
            topOfBooks?: never;
            rateUpdates?: RateUpdates;
        }))));
        get heartbeat(): Heartbeat;
        set heartbeat(value: Heartbeat);
        get has_heartbeat(): boolean;
        get topOfBooks(): TopOfBooks;
        set topOfBooks(value: TopOfBooks);
        get has_topOfBooks(): boolean;
        get rateUpdates(): RateUpdates;
        set rateUpdates(value: RateUpdates);
        get has_rateUpdates(): boolean;
        get inner(): "none" | "heartbeat" | "topOfBooks" | "rateUpdates";
        static fromObject(data: {
            heartbeat?: ReturnType<typeof Heartbeat.prototype.toObject>;
            topOfBooks?: ReturnType<typeof TopOfBooks.prototype.toObject>;
            rateUpdates?: ReturnType<typeof RateUpdates.prototype.toObject>;
        }): AggMessage;
        toObject(): {
            heartbeat?: ReturnType<typeof Heartbeat.prototype.toObject>;
            topOfBooks?: ReturnType<typeof TopOfBooks.prototype.toObject>;
            rateUpdates?: ReturnType<typeof RateUpdates.prototype.toObject>;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AggMessage;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): AggMessage;
    }
    class TopOfBook extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            marketId?: number;
            transactTime?: number;
            bidPrice?: number;
            bidQuantity?: number;
            askPrice?: number;
            askQuantity?: number;
            lastPrice?: number;
            rolling24hPrice?: number;
        });
        get marketId(): number;
        set marketId(value: number);
        get transactTime(): number;
        set transactTime(value: number);
        get bidPrice(): number;
        set bidPrice(value: number);
        get bidQuantity(): number;
        set bidQuantity(value: number);
        get askPrice(): number;
        set askPrice(value: number);
        get askQuantity(): number;
        set askQuantity(value: number);
        get lastPrice(): number;
        set lastPrice(value: number);
        get rolling24hPrice(): number;
        set rolling24hPrice(value: number);
        static fromObject(data: {
            marketId?: number;
            transactTime?: number;
            bidPrice?: number;
            bidQuantity?: number;
            askPrice?: number;
            askQuantity?: number;
            lastPrice?: number;
            rolling24hPrice?: number;
        }): TopOfBook;
        toObject(): {
            marketId?: number;
            transactTime?: number;
            bidPrice?: number;
            bidQuantity?: number;
            askPrice?: number;
            askQuantity?: number;
            lastPrice?: number;
            rolling24hPrice?: number;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TopOfBook;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): TopOfBook;
    }
    class TopOfBooks extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            tops?: TopOfBook[];
        });
        get tops(): TopOfBook[];
        set tops(value: TopOfBook[]);
        static fromObject(data: {
            tops?: ReturnType<typeof TopOfBook.prototype.toObject>[];
        }): TopOfBooks;
        toObject(): {
            tops?: ReturnType<typeof TopOfBook.prototype.toObject>[];
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TopOfBooks;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): TopOfBooks;
    }
    class RateUpdate extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            assetId?: number;
            timestamp?: number;
            rate?: number;
            side?: RateUpdateSide;
        });
        get assetId(): number;
        set assetId(value: number);
        get timestamp(): number;
        set timestamp(value: number);
        get rate(): number;
        set rate(value: number);
        get side(): RateUpdateSide;
        set side(value: RateUpdateSide);
        static fromObject(data: {
            assetId?: number;
            timestamp?: number;
            rate?: number;
            side?: RateUpdateSide;
        }): RateUpdate;
        toObject(): {
            assetId?: number;
            timestamp?: number;
            rate?: number;
            side?: RateUpdateSide;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RateUpdate;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): RateUpdate;
    }
    class RateUpdates extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            updates?: RateUpdate[];
        });
        get updates(): RateUpdate[];
        set updates(value: RateUpdate[]);
        static fromObject(data: {
            updates?: ReturnType<typeof RateUpdate.prototype.toObject>[];
        }): RateUpdates;
        toObject(): {
            updates?: ReturnType<typeof RateUpdate.prototype.toObject>[];
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RateUpdates;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): RateUpdates;
    }
    class ClientMessage extends pb_1.Message {
        #private;
        constructor(data?: any[] | ({} & (({
            heartbeat?: Heartbeat;
            config?: never;
        } | {
            heartbeat?: never;
            config?: Config;
        }))));
        get heartbeat(): Heartbeat;
        set heartbeat(value: Heartbeat);
        get has_heartbeat(): boolean;
        get config(): Config;
        set config(value: Config);
        get has_config(): boolean;
        get inner(): "none" | "config" | "heartbeat";
        static fromObject(data: {
            heartbeat?: ReturnType<typeof Heartbeat.prototype.toObject>;
            config?: ReturnType<typeof Config.prototype.toObject>;
        }): ClientMessage;
        toObject(): {
            heartbeat?: ReturnType<typeof Heartbeat.prototype.toObject>;
            config?: ReturnType<typeof Config.prototype.toObject>;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ClientMessage;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): ClientMessage;
    }
    class Config extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            mbp?: boolean;
            mbo?: boolean;
            trades?: boolean;
            summary?: boolean;
            klines?: KlineInterval[];
        });
        get mbp(): boolean;
        set mbp(value: boolean);
        get mbo(): boolean;
        set mbo(value: boolean);
        get trades(): boolean;
        set trades(value: boolean);
        get summary(): boolean;
        set summary(value: boolean);
        get klines(): KlineInterval[];
        set klines(value: KlineInterval[]);
        static fromObject(data: {
            mbp?: boolean;
            mbo?: boolean;
            trades?: boolean;
            summary?: boolean;
            klines?: KlineInterval[];
        }): Config;
        toObject(): {
            mbp?: boolean;
            mbo?: boolean;
            trades?: boolean;
            summary?: boolean;
            klines?: KlineInterval[];
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Config;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): Config;
    }
}
