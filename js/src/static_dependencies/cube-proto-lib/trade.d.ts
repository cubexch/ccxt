/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.15.8
 * source: trade.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export declare namespace trade {
    enum Side {
        BID = 0,
        ASK = 1
    }
    enum TimeInForce {
        IMMEDIATE_OR_CANCEL = 0,
        GOOD_FOR_SESSION = 1,
        FILL_OR_KILL = 2
    }
    enum OrderType {
        LIMIT = 0,
        MARKET_LIMIT = 1,
        MARKET_WITH_PROTECTION = 2
    }
    enum SelfTradePrevention {
        CANCEL_RESTING = 0,
        CANCEL_AGGRESSING = 1,
        ALLOW_SELF_TRADE = 2
    }
    enum PostOnly {
        DISABLED = 0,
        ENABLED = 1
    }
    class Credentials extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            accessKeyId?: string;
            signature?: string;
            timestamp?: number;
        });
        get accessKeyId(): string;
        set accessKeyId(value: string);
        get signature(): string;
        set signature(value: string);
        get timestamp(): number;
        set timestamp(value: number);
        static fromObject(data: {
            accessKeyId?: string;
            signature?: string;
            timestamp?: number;
        }): Credentials;
        toObject(): {
            accessKeyId?: string;
            signature?: string;
            timestamp?: number;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Credentials;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): Credentials;
    }
    class OrderRequest extends pb_1.Message {
        #private;
        constructor(data?: any[] | ({} & (({
            new?: NewOrder;
            cancel?: never;
            modify?: never;
            heartbeat?: never;
            mc?: never;
        } | {
            new?: never;
            cancel?: CancelOrder;
            modify?: never;
            heartbeat?: never;
            mc?: never;
        } | {
            new?: never;
            cancel?: never;
            modify?: ModifyOrder;
            heartbeat?: never;
            mc?: never;
        } | {
            new?: never;
            cancel?: never;
            modify?: never;
            heartbeat?: Heartbeat;
            mc?: never;
        } | {
            new?: never;
            cancel?: never;
            modify?: never;
            heartbeat?: never;
            mc?: MassCancel;
        }))));
        get new(): NewOrder;
        set new(value: NewOrder);
        get has_new(): boolean;
        get cancel(): CancelOrder;
        set cancel(value: CancelOrder);
        get has_cancel(): boolean;
        get modify(): ModifyOrder;
        set modify(value: ModifyOrder);
        get has_modify(): boolean;
        get heartbeat(): Heartbeat;
        set heartbeat(value: Heartbeat);
        get has_heartbeat(): boolean;
        get mc(): MassCancel;
        set mc(value: MassCancel);
        get has_mc(): boolean;
        get inner(): "cancel" | "none" | "new" | "mc" | "heartbeat" | "modify";
        static fromObject(data: {
            new?: ReturnType<typeof NewOrder.prototype.toObject>;
            cancel?: ReturnType<typeof CancelOrder.prototype.toObject>;
            modify?: ReturnType<typeof ModifyOrder.prototype.toObject>;
            heartbeat?: ReturnType<typeof Heartbeat.prototype.toObject>;
            mc?: ReturnType<typeof MassCancel.prototype.toObject>;
        }): OrderRequest;
        toObject(): {
            new?: ReturnType<typeof NewOrder.prototype.toObject>;
            cancel?: ReturnType<typeof CancelOrder.prototype.toObject>;
            modify?: ReturnType<typeof ModifyOrder.prototype.toObject>;
            heartbeat?: ReturnType<typeof Heartbeat.prototype.toObject>;
            mc?: ReturnType<typeof MassCancel.prototype.toObject>;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OrderRequest;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): OrderRequest;
    }
    class NewOrder extends pb_1.Message {
        #private;
        constructor(data?: any[] | ({
            clientOrderId?: number;
            requestId?: number;
            marketId?: number;
            quantity?: number;
            side?: Side;
            timeInForce?: TimeInForce;
            orderType?: OrderType;
            subaccountId?: number;
            postOnly?: PostOnly;
        } & (({
            price?: number;
        }) | ({
            selfTradePrevention?: SelfTradePrevention;
        }))));
        get clientOrderId(): number;
        set clientOrderId(value: number);
        get requestId(): number;
        set requestId(value: number);
        get marketId(): number;
        set marketId(value: number);
        get price(): number;
        set price(value: number);
        get has_price(): boolean;
        get quantity(): number;
        set quantity(value: number);
        get side(): Side;
        set side(value: Side);
        get timeInForce(): TimeInForce;
        set timeInForce(value: TimeInForce);
        get orderType(): OrderType;
        set orderType(value: OrderType);
        get subaccountId(): number;
        set subaccountId(value: number);
        get selfTradePrevention(): SelfTradePrevention;
        set selfTradePrevention(value: SelfTradePrevention);
        get has_selfTradePrevention(): boolean;
        get postOnly(): PostOnly;
        set postOnly(value: PostOnly);
        get _price(): "price" | "none";
        get _selfTradePrevention(): "none" | "selfTradePrevention";
        static fromObject(data: {
            clientOrderId?: number;
            requestId?: number;
            marketId?: number;
            price?: number;
            quantity?: number;
            side?: Side;
            timeInForce?: TimeInForce;
            orderType?: OrderType;
            subaccountId?: number;
            selfTradePrevention?: SelfTradePrevention;
            postOnly?: PostOnly;
        }): NewOrder;
        toObject(): {
            clientOrderId?: number;
            requestId?: number;
            marketId?: number;
            price?: number;
            quantity?: number;
            side?: Side;
            timeInForce?: TimeInForce;
            orderType?: OrderType;
            subaccountId?: number;
            selfTradePrevention?: SelfTradePrevention;
            postOnly?: PostOnly;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewOrder;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): NewOrder;
    }
    class CancelOrder extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            marketId?: number;
            clientOrderId?: number;
            requestId?: number;
            subaccountId?: number;
        });
        get marketId(): number;
        set marketId(value: number);
        get clientOrderId(): number;
        set clientOrderId(value: number);
        get requestId(): number;
        set requestId(value: number);
        get subaccountId(): number;
        set subaccountId(value: number);
        static fromObject(data: {
            marketId?: number;
            clientOrderId?: number;
            requestId?: number;
            subaccountId?: number;
        }): CancelOrder;
        toObject(): {
            marketId?: number;
            clientOrderId?: number;
            requestId?: number;
            subaccountId?: number;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CancelOrder;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): CancelOrder;
    }
    class ModifyOrder extends pb_1.Message {
        #private;
        constructor(data?: any[] | ({
            marketId?: number;
            clientOrderId?: number;
            requestId?: number;
            newPrice?: number;
            newQuantity?: number;
            subaccountId?: number;
            postOnly?: PostOnly;
        } & (({
            selfTradePrevention?: SelfTradePrevention;
        }))));
        get marketId(): number;
        set marketId(value: number);
        get clientOrderId(): number;
        set clientOrderId(value: number);
        get requestId(): number;
        set requestId(value: number);
        get newPrice(): number;
        set newPrice(value: number);
        get newQuantity(): number;
        set newQuantity(value: number);
        get subaccountId(): number;
        set subaccountId(value: number);
        get selfTradePrevention(): SelfTradePrevention;
        set selfTradePrevention(value: SelfTradePrevention);
        get has_selfTradePrevention(): boolean;
        get postOnly(): PostOnly;
        set postOnly(value: PostOnly);
        get _selfTradePrevention(): "none" | "selfTradePrevention";
        static fromObject(data: {
            marketId?: number;
            clientOrderId?: number;
            requestId?: number;
            newPrice?: number;
            newQuantity?: number;
            subaccountId?: number;
            selfTradePrevention?: SelfTradePrevention;
            postOnly?: PostOnly;
        }): ModifyOrder;
        toObject(): {
            marketId?: number;
            clientOrderId?: number;
            requestId?: number;
            newPrice?: number;
            newQuantity?: number;
            subaccountId?: number;
            selfTradePrevention?: SelfTradePrevention;
            postOnly?: PostOnly;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ModifyOrder;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): ModifyOrder;
    }
    class MassCancel extends pb_1.Message {
        #private;
        constructor(data?: any[] | ({
            subaccountId?: number;
            requestId?: number;
        } & (({
            marketId?: number;
        }) | ({
            side?: Side;
        }))));
        get subaccountId(): number;
        set subaccountId(value: number);
        get requestId(): number;
        set requestId(value: number);
        get marketId(): number;
        set marketId(value: number);
        get has_marketId(): boolean;
        get side(): Side;
        set side(value: Side);
        get has_side(): boolean;
        get _marketId(): "marketId" | "none";
        get _side(): "side" | "none";
        static fromObject(data: {
            subaccountId?: number;
            requestId?: number;
            marketId?: number;
            side?: Side;
        }): MassCancel;
        toObject(): {
            subaccountId?: number;
            requestId?: number;
            marketId?: number;
            side?: Side;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MassCancel;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): MassCancel;
    }
    class Heartbeat extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            requestId?: number;
            timestamp?: number;
        });
        get requestId(): number;
        set requestId(value: number);
        get timestamp(): number;
        set timestamp(value: number);
        static fromObject(data: {
            requestId?: number;
            timestamp?: number;
        }): Heartbeat;
        toObject(): {
            requestId?: number;
            timestamp?: number;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Heartbeat;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): Heartbeat;
    }
    class OrderResponse extends pb_1.Message {
        #private;
        constructor(data?: any[] | ({} & (({
            newAck?: NewOrderAck;
            cancelAck?: never;
            modifyAck?: never;
            newReject?: never;
            cancelReject?: never;
            modifyReject?: never;
            fill?: never;
            heartbeat?: never;
            position?: never;
            massCancelAck?: never;
        } | {
            newAck?: never;
            cancelAck?: CancelOrderAck;
            modifyAck?: never;
            newReject?: never;
            cancelReject?: never;
            modifyReject?: never;
            fill?: never;
            heartbeat?: never;
            position?: never;
            massCancelAck?: never;
        } | {
            newAck?: never;
            cancelAck?: never;
            modifyAck?: ModifyOrderAck;
            newReject?: never;
            cancelReject?: never;
            modifyReject?: never;
            fill?: never;
            heartbeat?: never;
            position?: never;
            massCancelAck?: never;
        } | {
            newAck?: never;
            cancelAck?: never;
            modifyAck?: never;
            newReject?: NewOrderReject;
            cancelReject?: never;
            modifyReject?: never;
            fill?: never;
            heartbeat?: never;
            position?: never;
            massCancelAck?: never;
        } | {
            newAck?: never;
            cancelAck?: never;
            modifyAck?: never;
            newReject?: never;
            cancelReject?: CancelOrderReject;
            modifyReject?: never;
            fill?: never;
            heartbeat?: never;
            position?: never;
            massCancelAck?: never;
        } | {
            newAck?: never;
            cancelAck?: never;
            modifyAck?: never;
            newReject?: never;
            cancelReject?: never;
            modifyReject?: ModifyOrderReject;
            fill?: never;
            heartbeat?: never;
            position?: never;
            massCancelAck?: never;
        } | {
            newAck?: never;
            cancelAck?: never;
            modifyAck?: never;
            newReject?: never;
            cancelReject?: never;
            modifyReject?: never;
            fill?: Fill;
            heartbeat?: never;
            position?: never;
            massCancelAck?: never;
        } | {
            newAck?: never;
            cancelAck?: never;
            modifyAck?: never;
            newReject?: never;
            cancelReject?: never;
            modifyReject?: never;
            fill?: never;
            heartbeat?: Heartbeat;
            position?: never;
            massCancelAck?: never;
        } | {
            newAck?: never;
            cancelAck?: never;
            modifyAck?: never;
            newReject?: never;
            cancelReject?: never;
            modifyReject?: never;
            fill?: never;
            heartbeat?: never;
            position?: AssetPosition;
            massCancelAck?: never;
        } | {
            newAck?: never;
            cancelAck?: never;
            modifyAck?: never;
            newReject?: never;
            cancelReject?: never;
            modifyReject?: never;
            fill?: never;
            heartbeat?: never;
            position?: never;
            massCancelAck?: MassCancelAck;
        }))));
        get newAck(): NewOrderAck;
        set newAck(value: NewOrderAck);
        get has_newAck(): boolean;
        get cancelAck(): CancelOrderAck;
        set cancelAck(value: CancelOrderAck);
        get has_cancelAck(): boolean;
        get modifyAck(): ModifyOrderAck;
        set modifyAck(value: ModifyOrderAck);
        get has_modifyAck(): boolean;
        get newReject(): NewOrderReject;
        set newReject(value: NewOrderReject);
        get has_newReject(): boolean;
        get cancelReject(): CancelOrderReject;
        set cancelReject(value: CancelOrderReject);
        get has_cancelReject(): boolean;
        get modifyReject(): ModifyOrderReject;
        set modifyReject(value: ModifyOrderReject);
        get has_modifyReject(): boolean;
        get fill(): Fill;
        set fill(value: Fill);
        get has_fill(): boolean;
        get heartbeat(): Heartbeat;
        set heartbeat(value: Heartbeat);
        get has_heartbeat(): boolean;
        get position(): AssetPosition;
        set position(value: AssetPosition);
        get has_position(): boolean;
        get massCancelAck(): MassCancelAck;
        set massCancelAck(value: MassCancelAck);
        get has_massCancelAck(): boolean;
        get inner(): "fill" | "position" | "none" | "heartbeat" | "newAck" | "cancelAck" | "modifyAck" | "newReject" | "cancelReject" | "modifyReject" | "massCancelAck";
        static fromObject(data: {
            newAck?: ReturnType<typeof NewOrderAck.prototype.toObject>;
            cancelAck?: ReturnType<typeof CancelOrderAck.prototype.toObject>;
            modifyAck?: ReturnType<typeof ModifyOrderAck.prototype.toObject>;
            newReject?: ReturnType<typeof NewOrderReject.prototype.toObject>;
            cancelReject?: ReturnType<typeof CancelOrderReject.prototype.toObject>;
            modifyReject?: ReturnType<typeof ModifyOrderReject.prototype.toObject>;
            fill?: ReturnType<typeof Fill.prototype.toObject>;
            heartbeat?: ReturnType<typeof Heartbeat.prototype.toObject>;
            position?: ReturnType<typeof AssetPosition.prototype.toObject>;
            massCancelAck?: ReturnType<typeof MassCancelAck.prototype.toObject>;
        }): OrderResponse;
        toObject(): {
            newAck?: ReturnType<typeof NewOrderAck.prototype.toObject>;
            cancelAck?: ReturnType<typeof CancelOrderAck.prototype.toObject>;
            modifyAck?: ReturnType<typeof ModifyOrderAck.prototype.toObject>;
            newReject?: ReturnType<typeof NewOrderReject.prototype.toObject>;
            cancelReject?: ReturnType<typeof CancelOrderReject.prototype.toObject>;
            modifyReject?: ReturnType<typeof ModifyOrderReject.prototype.toObject>;
            fill?: ReturnType<typeof Fill.prototype.toObject>;
            heartbeat?: ReturnType<typeof Heartbeat.prototype.toObject>;
            position?: ReturnType<typeof AssetPosition.prototype.toObject>;
            massCancelAck?: ReturnType<typeof MassCancelAck.prototype.toObject>;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OrderResponse;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): OrderResponse;
    }
    class NewOrderAck extends pb_1.Message {
        #private;
        constructor(data?: any[] | ({
            msgSeqNum?: number;
            clientOrderId?: number;
            requestId?: number;
            exchangeOrderId?: number;
            marketId?: number;
            quantity?: number;
            side?: Side;
            timeInForce?: TimeInForce;
            orderType?: OrderType;
            transactTime?: number;
            subaccountId?: number;
        } & (({
            price?: number;
        }))));
        get msgSeqNum(): number;
        set msgSeqNum(value: number);
        get clientOrderId(): number;
        set clientOrderId(value: number);
        get requestId(): number;
        set requestId(value: number);
        get exchangeOrderId(): number;
        set exchangeOrderId(value: number);
        get marketId(): number;
        set marketId(value: number);
        get price(): number;
        set price(value: number);
        get has_price(): boolean;
        get quantity(): number;
        set quantity(value: number);
        get side(): Side;
        set side(value: Side);
        get timeInForce(): TimeInForce;
        set timeInForce(value: TimeInForce);
        get orderType(): OrderType;
        set orderType(value: OrderType);
        get transactTime(): number;
        set transactTime(value: number);
        get subaccountId(): number;
        set subaccountId(value: number);
        get _price(): "price" | "none";
        static fromObject(data: {
            msgSeqNum?: number;
            clientOrderId?: number;
            requestId?: number;
            exchangeOrderId?: number;
            marketId?: number;
            price?: number;
            quantity?: number;
            side?: Side;
            timeInForce?: TimeInForce;
            orderType?: OrderType;
            transactTime?: number;
            subaccountId?: number;
        }): NewOrderAck;
        toObject(): {
            msgSeqNum?: number;
            clientOrderId?: number;
            requestId?: number;
            exchangeOrderId?: number;
            marketId?: number;
            price?: number;
            quantity?: number;
            side?: Side;
            timeInForce?: TimeInForce;
            orderType?: OrderType;
            transactTime?: number;
            subaccountId?: number;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewOrderAck;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): NewOrderAck;
    }
    class CancelOrderAck extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            msgSeqNum?: number;
            clientOrderId?: number;
            requestId?: number;
            transactTime?: number;
            subaccountId?: number;
            reason?: CancelOrderAck.Reason;
            marketId?: number;
        });
        get msgSeqNum(): number;
        set msgSeqNum(value: number);
        get clientOrderId(): number;
        set clientOrderId(value: number);
        get requestId(): number;
        set requestId(value: number);
        get transactTime(): number;
        set transactTime(value: number);
        get subaccountId(): number;
        set subaccountId(value: number);
        get reason(): CancelOrderAck.Reason;
        set reason(value: CancelOrderAck.Reason);
        get marketId(): number;
        set marketId(value: number);
        static fromObject(data: {
            msgSeqNum?: number;
            clientOrderId?: number;
            requestId?: number;
            transactTime?: number;
            subaccountId?: number;
            reason?: CancelOrderAck.Reason;
            marketId?: number;
        }): CancelOrderAck;
        toObject(): {
            msgSeqNum?: number;
            clientOrderId?: number;
            requestId?: number;
            transactTime?: number;
            subaccountId?: number;
            reason?: CancelOrderAck.Reason;
            marketId?: number;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CancelOrderAck;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): CancelOrderAck;
    }
    namespace CancelOrderAck {
        enum Reason {
            UNCLASSIFIED = 0,
            DISCONNECT = 1,
            REQUESTED = 2,
            IOC = 3,
            STP_RESTING = 4,
            STP_AGGRESSING = 5,
            MASS_CANCEL = 6
        }
    }
    class ModifyOrderAck extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            msgSeqNum?: number;
            clientOrderId?: number;
            requestId?: number;
            transactTime?: number;
            newQuantity?: number;
            subaccountId?: number;
            marketId?: number;
            price?: number;
        });
        get msgSeqNum(): number;
        set msgSeqNum(value: number);
        get clientOrderId(): number;
        set clientOrderId(value: number);
        get requestId(): number;
        set requestId(value: number);
        get transactTime(): number;
        set transactTime(value: number);
        get newQuantity(): number;
        set newQuantity(value: number);
        get subaccountId(): number;
        set subaccountId(value: number);
        get marketId(): number;
        set marketId(value: number);
        get price(): number;
        set price(value: number);
        static fromObject(data: {
            msgSeqNum?: number;
            clientOrderId?: number;
            requestId?: number;
            transactTime?: number;
            newQuantity?: number;
            subaccountId?: number;
            marketId?: number;
            price?: number;
        }): ModifyOrderAck;
        toObject(): {
            msgSeqNum?: number;
            clientOrderId?: number;
            requestId?: number;
            transactTime?: number;
            newQuantity?: number;
            subaccountId?: number;
            marketId?: number;
            price?: number;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ModifyOrderAck;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): ModifyOrderAck;
    }
    class MassCancelAck extends pb_1.Message {
        #private;
        constructor(data?: any[] | ({
            msgSeqNum?: number;
            subaccountId?: number;
            requestId?: number;
            transactTime?: number;
            totalAffectedOrders?: number;
        } & (({
            reason?: MassCancelAck.Reason;
        }))));
        get msgSeqNum(): number;
        set msgSeqNum(value: number);
        get subaccountId(): number;
        set subaccountId(value: number);
        get requestId(): number;
        set requestId(value: number);
        get transactTime(): number;
        set transactTime(value: number);
        get reason(): MassCancelAck.Reason;
        set reason(value: MassCancelAck.Reason);
        get has_reason(): boolean;
        get totalAffectedOrders(): number;
        set totalAffectedOrders(value: number);
        get _reason(): "reason" | "none";
        static fromObject(data: {
            msgSeqNum?: number;
            subaccountId?: number;
            requestId?: number;
            transactTime?: number;
            reason?: MassCancelAck.Reason;
            totalAffectedOrders?: number;
        }): MassCancelAck;
        toObject(): {
            msgSeqNum?: number;
            subaccountId?: number;
            requestId?: number;
            transactTime?: number;
            reason?: MassCancelAck.Reason;
            totalAffectedOrders?: number;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MassCancelAck;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): MassCancelAck;
    }
    namespace MassCancelAck {
        enum Reason {
            UNCLASSIFIED = 0,
            INVALID_MARKET_ID = 1,
            INVALID_SIDE = 2
        }
    }
    class NewOrderReject extends pb_1.Message {
        #private;
        constructor(data?: any[] | ({
            msgSeqNum?: number;
            clientOrderId?: number;
            requestId?: number;
            transactTime?: number;
            subaccountId?: number;
            reason?: NewOrderReject.Reason;
            marketId?: number;
            quantity?: number;
            side?: Side;
            timeInForce?: TimeInForce;
            orderType?: OrderType;
        } & (({
            price?: number;
        }))));
        get msgSeqNum(): number;
        set msgSeqNum(value: number);
        get clientOrderId(): number;
        set clientOrderId(value: number);
        get requestId(): number;
        set requestId(value: number);
        get transactTime(): number;
        set transactTime(value: number);
        get subaccountId(): number;
        set subaccountId(value: number);
        get reason(): NewOrderReject.Reason;
        set reason(value: NewOrderReject.Reason);
        get marketId(): number;
        set marketId(value: number);
        get price(): number;
        set price(value: number);
        get has_price(): boolean;
        get quantity(): number;
        set quantity(value: number);
        get side(): Side;
        set side(value: Side);
        get timeInForce(): TimeInForce;
        set timeInForce(value: TimeInForce);
        get orderType(): OrderType;
        set orderType(value: OrderType);
        get _price(): "price" | "none";
        static fromObject(data: {
            msgSeqNum?: number;
            clientOrderId?: number;
            requestId?: number;
            transactTime?: number;
            subaccountId?: number;
            reason?: NewOrderReject.Reason;
            marketId?: number;
            price?: number;
            quantity?: number;
            side?: Side;
            timeInForce?: TimeInForce;
            orderType?: OrderType;
        }): NewOrderReject;
        toObject(): {
            msgSeqNum?: number;
            clientOrderId?: number;
            requestId?: number;
            transactTime?: number;
            subaccountId?: number;
            reason?: NewOrderReject.Reason;
            marketId?: number;
            price?: number;
            quantity?: number;
            side?: Side;
            timeInForce?: TimeInForce;
            orderType?: OrderType;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewOrderReject;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): NewOrderReject;
    }
    namespace NewOrderReject {
        enum Reason {
            UNCLASSIFIED = 0,
            INVALID_QUANTITY = 1,
            INVALID_MARKET_ID = 2,
            DUPLICATE_ORDER_ID = 3,
            INVALID_SIDE = 4,
            INVALID_TIME_IN_FORCE = 5,
            INVALID_ORDER_TYPE = 6,
            INVALID_POST_ONLY = 7,
            INVALID_SELF_TRADE_PREVENTION = 8,
            UNKNOWN_TRADER = 9,
            PRICE_WITH_MARKET_ORDER = 10,
            POST_ONLY_WITH_MARKET_ORDER = 11,
            POST_ONLY_WITH_INVALID_TIF = 12,
            EXCEEDED_SPOT_POSITION = 13,
            NO_OPPOSING_LIMIT_ORDER = 14,
            POST_ONLY_WOULD_TRADE = 15,
            DID_NOT_FULLY_FILL = 16
        }
    }
    class CancelOrderReject extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            msgSeqNum?: number;
            clientOrderId?: number;
            requestId?: number;
            transactTime?: number;
            subaccountId?: number;
            reason?: CancelOrderReject.Reason;
            marketId?: number;
        });
        get msgSeqNum(): number;
        set msgSeqNum(value: number);
        get clientOrderId(): number;
        set clientOrderId(value: number);
        get requestId(): number;
        set requestId(value: number);
        get transactTime(): number;
        set transactTime(value: number);
        get subaccountId(): number;
        set subaccountId(value: number);
        get reason(): CancelOrderReject.Reason;
        set reason(value: CancelOrderReject.Reason);
        get marketId(): number;
        set marketId(value: number);
        static fromObject(data: {
            msgSeqNum?: number;
            clientOrderId?: number;
            requestId?: number;
            transactTime?: number;
            subaccountId?: number;
            reason?: CancelOrderReject.Reason;
            marketId?: number;
        }): CancelOrderReject;
        toObject(): {
            msgSeqNum?: number;
            clientOrderId?: number;
            requestId?: number;
            transactTime?: number;
            subaccountId?: number;
            reason?: CancelOrderReject.Reason;
            marketId?: number;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CancelOrderReject;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): CancelOrderReject;
    }
    namespace CancelOrderReject {
        enum Reason {
            UNCLASSIFIED = 0,
            INVALID_MARKET_ID = 1,
            ORDER_NOT_FOUND = 2
        }
    }
    class ModifyOrderReject extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            msgSeqNum?: number;
            clientOrderId?: number;
            requestId?: number;
            transactTime?: number;
            subaccountId?: number;
            reason?: ModifyOrderReject.Reason;
            marketId?: number;
        });
        get msgSeqNum(): number;
        set msgSeqNum(value: number);
        get clientOrderId(): number;
        set clientOrderId(value: number);
        get requestId(): number;
        set requestId(value: number);
        get transactTime(): number;
        set transactTime(value: number);
        get subaccountId(): number;
        set subaccountId(value: number);
        get reason(): ModifyOrderReject.Reason;
        set reason(value: ModifyOrderReject.Reason);
        get marketId(): number;
        set marketId(value: number);
        static fromObject(data: {
            msgSeqNum?: number;
            clientOrderId?: number;
            requestId?: number;
            transactTime?: number;
            subaccountId?: number;
            reason?: ModifyOrderReject.Reason;
            marketId?: number;
        }): ModifyOrderReject;
        toObject(): {
            msgSeqNum?: number;
            clientOrderId?: number;
            requestId?: number;
            transactTime?: number;
            subaccountId?: number;
            reason?: ModifyOrderReject.Reason;
            marketId?: number;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ModifyOrderReject;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): ModifyOrderReject;
    }
    namespace ModifyOrderReject {
        enum Reason {
            UNCLASSIFIED = 0,
            INVALID_QUANTITY = 1,
            INVALID_MARKET_ID = 2,
            ORDER_NOT_FOUND = 3,
            INVALID_IFM = 4,
            INVALID_POST_ONLY = 5,
            INVALID_SELF_TRADE_PREVENTION = 6,
            UNKNOWN_TRADER = 7,
            EXCEEDED_SPOT_POSITION = 8,
            POST_ONLY_WOULD_TRADE = 9
        }
    }
    class Fill extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            msgSeqNum?: number;
            marketId?: number;
            clientOrderId?: number;
            exchangeOrderId?: number;
            fillPrice?: number;
            fillQuantity?: number;
            leavesQuantity?: number;
            transactTime?: number;
            subaccountId?: number;
        });
        get msgSeqNum(): number;
        set msgSeqNum(value: number);
        get marketId(): number;
        set marketId(value: number);
        get clientOrderId(): number;
        set clientOrderId(value: number);
        get exchangeOrderId(): number;
        set exchangeOrderId(value: number);
        get fillPrice(): number;
        set fillPrice(value: number);
        get fillQuantity(): number;
        set fillQuantity(value: number);
        get leavesQuantity(): number;
        set leavesQuantity(value: number);
        get transactTime(): number;
        set transactTime(value: number);
        get subaccountId(): number;
        set subaccountId(value: number);
        static fromObject(data: {
            msgSeqNum?: number;
            marketId?: number;
            clientOrderId?: number;
            exchangeOrderId?: number;
            fillPrice?: number;
            fillQuantity?: number;
            leavesQuantity?: number;
            transactTime?: number;
            subaccountId?: number;
        }): Fill;
        toObject(): {
            msgSeqNum?: number;
            marketId?: number;
            clientOrderId?: number;
            exchangeOrderId?: number;
            fillPrice?: number;
            fillQuantity?: number;
            leavesQuantity?: number;
            transactTime?: number;
            subaccountId?: number;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Fill;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): Fill;
    }
    class AssetPosition extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            subaccountId?: number;
            assetId?: number;
            total?: RawUnits;
            available?: RawUnits;
        });
        get subaccountId(): number;
        set subaccountId(value: number);
        get assetId(): number;
        set assetId(value: number);
        get total(): RawUnits;
        set total(value: RawUnits);
        get has_total(): boolean;
        get available(): RawUnits;
        set available(value: RawUnits);
        get has_available(): boolean;
        static fromObject(data: {
            subaccountId?: number;
            assetId?: number;
            total?: ReturnType<typeof RawUnits.prototype.toObject>;
            available?: ReturnType<typeof RawUnits.prototype.toObject>;
        }): AssetPosition;
        toObject(): {
            subaccountId?: number;
            assetId?: number;
            total?: ReturnType<typeof RawUnits.prototype.toObject>;
            available?: ReturnType<typeof RawUnits.prototype.toObject>;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssetPosition;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): AssetPosition;
    }
    class RawUnits extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            word0?: number;
            word1?: number;
            word2?: number;
            word3?: number;
        });
        get word0(): number;
        set word0(value: number);
        get word1(): number;
        set word1(value: number);
        get word2(): number;
        set word2(value: number);
        get word3(): number;
        set word3(value: number);
        static fromObject(data: {
            word0?: number;
            word1?: number;
            word2?: number;
            word3?: number;
        }): RawUnits;
        toObject(): {
            word0?: number;
            word1?: number;
            word2?: number;
            word3?: number;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RawUnits;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): RawUnits;
    }
    class Bootstrap extends pb_1.Message {
        #private;
        constructor(data?: any[] | ({} & (({
            done?: Done;
            resting?: never;
            position?: never;
        } | {
            done?: never;
            resting?: RestingOrders;
            position?: never;
        } | {
            done?: never;
            resting?: never;
            position?: AssetPositions;
        }))));
        get done(): Done;
        set done(value: Done);
        get has_done(): boolean;
        get resting(): RestingOrders;
        set resting(value: RestingOrders);
        get has_resting(): boolean;
        get position(): AssetPositions;
        set position(value: AssetPositions);
        get has_position(): boolean;
        get inner(): "position" | "done" | "none" | "resting";
        static fromObject(data: {
            done?: ReturnType<typeof Done.prototype.toObject>;
            resting?: ReturnType<typeof RestingOrders.prototype.toObject>;
            position?: ReturnType<typeof AssetPositions.prototype.toObject>;
        }): Bootstrap;
        toObject(): {
            done?: ReturnType<typeof Done.prototype.toObject>;
            resting?: ReturnType<typeof RestingOrders.prototype.toObject>;
            position?: ReturnType<typeof AssetPositions.prototype.toObject>;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Bootstrap;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): Bootstrap;
    }
    class RestingOrders extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            orders?: RestingOrder[];
        });
        get orders(): RestingOrder[];
        set orders(value: RestingOrder[]);
        static fromObject(data: {
            orders?: ReturnType<typeof RestingOrder.prototype.toObject>[];
        }): RestingOrders;
        toObject(): {
            orders?: ReturnType<typeof RestingOrder.prototype.toObject>[];
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RestingOrders;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): RestingOrders;
    }
    class AssetPositions extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            positions?: AssetPosition[];
        });
        get positions(): AssetPosition[];
        set positions(value: AssetPosition[]);
        static fromObject(data: {
            positions?: ReturnType<typeof AssetPosition.prototype.toObject>[];
        }): AssetPositions;
        toObject(): {
            positions?: ReturnType<typeof AssetPosition.prototype.toObject>[];
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssetPositions;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): AssetPositions;
    }
    class Done extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            latestTransactTime?: number;
        });
        get latestTransactTime(): number;
        set latestTransactTime(value: number);
        static fromObject(data: {
            latestTransactTime?: number;
        }): Done;
        toObject(): {
            latestTransactTime?: number;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Done;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): Done;
    }
    class RestingOrder extends pb_1.Message {
        #private;
        constructor(data?: any[] | {
            clientOrderId?: number;
            exchangeOrderId?: number;
            marketId?: number;
            price?: number;
            originalQuantity?: number;
            side?: Side;
            timeInForce?: TimeInForce;
            orderType?: OrderType;
            remainingQuantity?: number;
            restTime?: number;
            subaccountId?: number;
        });
        get clientOrderId(): number;
        set clientOrderId(value: number);
        get exchangeOrderId(): number;
        set exchangeOrderId(value: number);
        get marketId(): number;
        set marketId(value: number);
        get price(): number;
        set price(value: number);
        get originalQuantity(): number;
        set originalQuantity(value: number);
        get side(): Side;
        set side(value: Side);
        get timeInForce(): TimeInForce;
        set timeInForce(value: TimeInForce);
        get orderType(): OrderType;
        set orderType(value: OrderType);
        get remainingQuantity(): number;
        set remainingQuantity(value: number);
        get restTime(): number;
        set restTime(value: number);
        get subaccountId(): number;
        set subaccountId(value: number);
        static fromObject(data: {
            clientOrderId?: number;
            exchangeOrderId?: number;
            marketId?: number;
            price?: number;
            originalQuantity?: number;
            side?: Side;
            timeInForce?: TimeInForce;
            orderType?: OrderType;
            remainingQuantity?: number;
            restTime?: number;
            subaccountId?: number;
        }): RestingOrder;
        toObject(): {
            clientOrderId?: number;
            exchangeOrderId?: number;
            marketId?: number;
            price?: number;
            originalQuantity?: number;
            side?: Side;
            timeInForce?: TimeInForce;
            orderType?: OrderType;
            remainingQuantity?: number;
            restTime?: number;
            subaccountId?: number;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RestingOrder;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): RestingOrder;
    }
}
