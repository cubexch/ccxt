// ----------------------------------------------------------------------------

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code
// EDIT THE CORRESPONDENT .ts FILE INSTEAD

var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.15.8
 * source: trade.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export var trade;
(function (trade) {
    var _Credentials_one_of_decls, _OrderRequest_one_of_decls, _NewOrder_one_of_decls, _CancelOrder_one_of_decls, _ModifyOrder_one_of_decls, _MassCancel_one_of_decls, _Heartbeat_one_of_decls, _OrderResponse_one_of_decls, _NewOrderAck_one_of_decls, _CancelOrderAck_one_of_decls, _ModifyOrderAck_one_of_decls, _MassCancelAck_one_of_decls, _NewOrderReject_one_of_decls, _CancelOrderReject_one_of_decls, _ModifyOrderReject_one_of_decls, _Fill_one_of_decls, _AssetPosition_one_of_decls, _RawUnits_one_of_decls, _Bootstrap_one_of_decls, _RestingOrders_one_of_decls, _AssetPositions_one_of_decls, _Done_one_of_decls, _RestingOrder_one_of_decls;
    let Side;
    (function (Side) {
        Side[Side["BID"] = 0] = "BID";
        Side[Side["ASK"] = 1] = "ASK";
    })(Side = trade.Side || (trade.Side = {}));
    let TimeInForce;
    (function (TimeInForce) {
        TimeInForce[TimeInForce["IMMEDIATE_OR_CANCEL"] = 0] = "IMMEDIATE_OR_CANCEL";
        TimeInForce[TimeInForce["GOOD_FOR_SESSION"] = 1] = "GOOD_FOR_SESSION";
        TimeInForce[TimeInForce["FILL_OR_KILL"] = 2] = "FILL_OR_KILL";
    })(TimeInForce = trade.TimeInForce || (trade.TimeInForce = {}));
    let OrderType;
    (function (OrderType) {
        OrderType[OrderType["LIMIT"] = 0] = "LIMIT";
        OrderType[OrderType["MARKET_LIMIT"] = 1] = "MARKET_LIMIT";
        OrderType[OrderType["MARKET_WITH_PROTECTION"] = 2] = "MARKET_WITH_PROTECTION";
    })(OrderType = trade.OrderType || (trade.OrderType = {}));
    let SelfTradePrevention;
    (function (SelfTradePrevention) {
        SelfTradePrevention[SelfTradePrevention["CANCEL_RESTING"] = 0] = "CANCEL_RESTING";
        SelfTradePrevention[SelfTradePrevention["CANCEL_AGGRESSING"] = 1] = "CANCEL_AGGRESSING";
        SelfTradePrevention[SelfTradePrevention["ALLOW_SELF_TRADE"] = 2] = "ALLOW_SELF_TRADE";
    })(SelfTradePrevention = trade.SelfTradePrevention || (trade.SelfTradePrevention = {}));
    let PostOnly;
    (function (PostOnly) {
        PostOnly[PostOnly["DISABLED"] = 0] = "DISABLED";
        PostOnly[PostOnly["ENABLED"] = 1] = "ENABLED";
    })(PostOnly = trade.PostOnly || (trade.PostOnly = {}));
    class Credentials extends pb_1.Message {
        constructor(data) {
            super();
            _Credentials_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _Credentials_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("accessKeyId" in data && data.accessKeyId != undefined) {
                    this.accessKeyId = data.accessKeyId;
                }
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
            }
        }
        get accessKeyId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "");
        }
        set accessKeyId(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get signature() {
            return pb_1.Message.getFieldWithDefault(this, 2, "");
        }
        set signature(value) {
            pb_1.Message.setField(this, 2, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0);
        }
        set timestamp(value) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data) {
            const message = new Credentials({});
            if (data.accessKeyId != null) {
                message.accessKeyId = data.accessKeyId;
            }
            if (data.signature != null) {
                message.signature = data.signature;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.accessKeyId != null) {
                data.accessKeyId = this.accessKeyId;
            }
            if (this.signature != null) {
                data.signature = this.signature;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.accessKeyId.length)
                writer.writeString(1, this.accessKeyId);
            if (this.signature.length)
                writer.writeString(2, this.signature);
            if (this.timestamp != 0)
                writer.writeUint64(3, this.timestamp);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Credentials();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.accessKeyId = reader.readString();
                        break;
                    case 2:
                        message.signature = reader.readString();
                        break;
                    case 3:
                        message.timestamp = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return Credentials.deserialize(bytes);
        }
    }
    _Credentials_one_of_decls = new WeakMap();
    trade.Credentials = Credentials;
    class OrderRequest extends pb_1.Message {
        constructor(data) {
            super();
            _OrderRequest_one_of_decls.set(this, [[1, 2, 3, 4, 5]]);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _OrderRequest_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("new" in data && data.new != undefined) {
                    this.new = data.new;
                }
                if ("cancel" in data && data.cancel != undefined) {
                    this.cancel = data.cancel;
                }
                if ("modify" in data && data.modify != undefined) {
                    this.modify = data.modify;
                }
                if ("heartbeat" in data && data.heartbeat != undefined) {
                    this.heartbeat = data.heartbeat;
                }
                if ("mc" in data && data.mc != undefined) {
                    this.mc = data.mc;
                }
            }
        }
        get new() {
            return pb_1.Message.getWrapperField(this, NewOrder, 1);
        }
        set new(value) {
            pb_1.Message.setOneofWrapperField(this, 1, __classPrivateFieldGet(this, _OrderRequest_one_of_decls, "f")[0], value);
        }
        get has_new() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get cancel() {
            return pb_1.Message.getWrapperField(this, CancelOrder, 2);
        }
        set cancel(value) {
            pb_1.Message.setOneofWrapperField(this, 2, __classPrivateFieldGet(this, _OrderRequest_one_of_decls, "f")[0], value);
        }
        get has_cancel() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get modify() {
            return pb_1.Message.getWrapperField(this, ModifyOrder, 3);
        }
        set modify(value) {
            pb_1.Message.setOneofWrapperField(this, 3, __classPrivateFieldGet(this, _OrderRequest_one_of_decls, "f")[0], value);
        }
        get has_modify() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get heartbeat() {
            return pb_1.Message.getWrapperField(this, Heartbeat, 4);
        }
        set heartbeat(value) {
            pb_1.Message.setOneofWrapperField(this, 4, __classPrivateFieldGet(this, _OrderRequest_one_of_decls, "f")[0], value);
        }
        get has_heartbeat() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get mc() {
            return pb_1.Message.getWrapperField(this, MassCancel, 5);
        }
        set mc(value) {
            pb_1.Message.setOneofWrapperField(this, 5, __classPrivateFieldGet(this, _OrderRequest_one_of_decls, "f")[0], value);
        }
        get has_mc() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get inner() {
            const cases = {
                0: "none",
                1: "new",
                2: "cancel",
                3: "modify",
                4: "heartbeat",
                5: "mc"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5])];
        }
        static fromObject(data) {
            const message = new OrderRequest({});
            if (data.new != null) {
                message.new = NewOrder.fromObject(data.new);
            }
            if (data.cancel != null) {
                message.cancel = CancelOrder.fromObject(data.cancel);
            }
            if (data.modify != null) {
                message.modify = ModifyOrder.fromObject(data.modify);
            }
            if (data.heartbeat != null) {
                message.heartbeat = Heartbeat.fromObject(data.heartbeat);
            }
            if (data.mc != null) {
                message.mc = MassCancel.fromObject(data.mc);
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.new != null) {
                data.new = this.new.toObject();
            }
            if (this.cancel != null) {
                data.cancel = this.cancel.toObject();
            }
            if (this.modify != null) {
                data.modify = this.modify.toObject();
            }
            if (this.heartbeat != null) {
                data.heartbeat = this.heartbeat.toObject();
            }
            if (this.mc != null) {
                data.mc = this.mc.toObject();
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_new)
                writer.writeMessage(1, this.new, () => this.new.serialize(writer));
            if (this.has_cancel)
                writer.writeMessage(2, this.cancel, () => this.cancel.serialize(writer));
            if (this.has_modify)
                writer.writeMessage(3, this.modify, () => this.modify.serialize(writer));
            if (this.has_heartbeat)
                writer.writeMessage(4, this.heartbeat, () => this.heartbeat.serialize(writer));
            if (this.has_mc)
                writer.writeMessage(5, this.mc, () => this.mc.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OrderRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.new, () => message.new = NewOrder.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.cancel, () => message.cancel = CancelOrder.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.modify, () => message.modify = ModifyOrder.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.heartbeat, () => message.heartbeat = Heartbeat.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.mc, () => message.mc = MassCancel.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return OrderRequest.deserialize(bytes);
        }
    }
    _OrderRequest_one_of_decls = new WeakMap();
    trade.OrderRequest = OrderRequest;
    class NewOrder extends pb_1.Message {
        constructor(data) {
            super();
            _NewOrder_one_of_decls.set(this, [[4], [10]]);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _NewOrder_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("clientOrderId" in data && data.clientOrderId != undefined) {
                    this.clientOrderId = data.clientOrderId;
                }
                if ("requestId" in data && data.requestId != undefined) {
                    this.requestId = data.requestId;
                }
                if ("marketId" in data && data.marketId != undefined) {
                    this.marketId = data.marketId;
                }
                if ("price" in data && data.price != undefined) {
                    this.price = data.price;
                }
                if ("quantity" in data && data.quantity != undefined) {
                    this.quantity = data.quantity;
                }
                if ("side" in data && data.side != undefined) {
                    this.side = data.side;
                }
                if ("timeInForce" in data && data.timeInForce != undefined) {
                    this.timeInForce = data.timeInForce;
                }
                if ("orderType" in data && data.orderType != undefined) {
                    this.orderType = data.orderType;
                }
                if ("subaccountId" in data && data.subaccountId != undefined) {
                    this.subaccountId = data.subaccountId;
                }
                if ("selfTradePrevention" in data && data.selfTradePrevention != undefined) {
                    this.selfTradePrevention = data.selfTradePrevention;
                }
                if ("postOnly" in data && data.postOnly != undefined) {
                    this.postOnly = data.postOnly;
                }
            }
        }
        get clientOrderId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0);
        }
        set clientOrderId(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get requestId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0);
        }
        set requestId(value) {
            pb_1.Message.setField(this, 2, value);
        }
        get marketId() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0);
        }
        set marketId(value) {
            pb_1.Message.setField(this, 3, value);
        }
        get price() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0);
        }
        set price(value) {
            pb_1.Message.setOneofField(this, 4, __classPrivateFieldGet(this, _NewOrder_one_of_decls, "f")[0], value);
        }
        get has_price() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get quantity() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0);
        }
        set quantity(value) {
            pb_1.Message.setField(this, 5, value);
        }
        get side() {
            return pb_1.Message.getFieldWithDefault(this, 6, Side.BID);
        }
        set side(value) {
            pb_1.Message.setField(this, 6, value);
        }
        get timeInForce() {
            return pb_1.Message.getFieldWithDefault(this, 7, TimeInForce.IMMEDIATE_OR_CANCEL);
        }
        set timeInForce(value) {
            pb_1.Message.setField(this, 7, value);
        }
        get orderType() {
            return pb_1.Message.getFieldWithDefault(this, 8, OrderType.LIMIT);
        }
        set orderType(value) {
            pb_1.Message.setField(this, 8, value);
        }
        get subaccountId() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0);
        }
        set subaccountId(value) {
            pb_1.Message.setField(this, 9, value);
        }
        get selfTradePrevention() {
            return pb_1.Message.getFieldWithDefault(this, 10, SelfTradePrevention.CANCEL_RESTING);
        }
        set selfTradePrevention(value) {
            pb_1.Message.setOneofField(this, 10, __classPrivateFieldGet(this, _NewOrder_one_of_decls, "f")[1], value);
        }
        get has_selfTradePrevention() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get postOnly() {
            return pb_1.Message.getFieldWithDefault(this, 11, PostOnly.DISABLED);
        }
        set postOnly(value) {
            pb_1.Message.setField(this, 11, value);
        }
        get _price() {
            const cases = {
                0: "none",
                4: "price"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        get _selfTradePrevention() {
            const cases = {
                0: "none",
                10: "selfTradePrevention"
            };
            return cases[pb_1.Message.computeOneofCase(this, [10])];
        }
        static fromObject(data) {
            const message = new NewOrder({});
            if (data.clientOrderId != null) {
                message.clientOrderId = data.clientOrderId;
            }
            if (data.requestId != null) {
                message.requestId = data.requestId;
            }
            if (data.marketId != null) {
                message.marketId = data.marketId;
            }
            if (data.price != null) {
                message.price = data.price;
            }
            if (data.quantity != null) {
                message.quantity = data.quantity;
            }
            if (data.side != null) {
                message.side = data.side;
            }
            if (data.timeInForce != null) {
                message.timeInForce = data.timeInForce;
            }
            if (data.orderType != null) {
                message.orderType = data.orderType;
            }
            if (data.subaccountId != null) {
                message.subaccountId = data.subaccountId;
            }
            if (data.selfTradePrevention != null) {
                message.selfTradePrevention = data.selfTradePrevention;
            }
            if (data.postOnly != null) {
                message.postOnly = data.postOnly;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.clientOrderId != null) {
                data.clientOrderId = this.clientOrderId;
            }
            if (this.requestId != null) {
                data.requestId = this.requestId;
            }
            if (this.marketId != null) {
                data.marketId = this.marketId;
            }
            if (this.price != null) {
                data.price = this.price;
            }
            if (this.quantity != null) {
                data.quantity = this.quantity;
            }
            if (this.side != null) {
                data.side = this.side;
            }
            if (this.timeInForce != null) {
                data.timeInForce = this.timeInForce;
            }
            if (this.orderType != null) {
                data.orderType = this.orderType;
            }
            if (this.subaccountId != null) {
                data.subaccountId = this.subaccountId;
            }
            if (this.selfTradePrevention != null) {
                data.selfTradePrevention = this.selfTradePrevention;
            }
            if (this.postOnly != null) {
                data.postOnly = this.postOnly;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.clientOrderId != 0)
                writer.writeUint64(1, this.clientOrderId);
            if (this.requestId != 0)
                writer.writeUint64(2, this.requestId);
            if (this.marketId != 0)
                writer.writeUint64(3, this.marketId);
            if (this.has_price)
                writer.writeUint64(4, this.price);
            if (this.quantity != 0)
                writer.writeUint64(5, this.quantity);
            if (this.side != Side.BID)
                writer.writeEnum(6, this.side);
            if (this.timeInForce != TimeInForce.IMMEDIATE_OR_CANCEL)
                writer.writeEnum(7, this.timeInForce);
            if (this.orderType != OrderType.LIMIT)
                writer.writeEnum(8, this.orderType);
            if (this.subaccountId != 0)
                writer.writeUint64(9, this.subaccountId);
            if (this.has_selfTradePrevention)
                writer.writeEnum(10, this.selfTradePrevention);
            if (this.postOnly != PostOnly.DISABLED)
                writer.writeEnum(11, this.postOnly);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewOrder();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.clientOrderId = reader.readUint64();
                        break;
                    case 2:
                        message.requestId = reader.readUint64();
                        break;
                    case 3:
                        message.marketId = reader.readUint64();
                        break;
                    case 4:
                        message.price = reader.readUint64();
                        break;
                    case 5:
                        message.quantity = reader.readUint64();
                        break;
                    case 6:
                        message.side = reader.readEnum();
                        break;
                    case 7:
                        message.timeInForce = reader.readEnum();
                        break;
                    case 8:
                        message.orderType = reader.readEnum();
                        break;
                    case 9:
                        message.subaccountId = reader.readUint64();
                        break;
                    case 10:
                        message.selfTradePrevention = reader.readEnum();
                        break;
                    case 11:
                        message.postOnly = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return NewOrder.deserialize(bytes);
        }
    }
    _NewOrder_one_of_decls = new WeakMap();
    trade.NewOrder = NewOrder;
    class CancelOrder extends pb_1.Message {
        constructor(data) {
            super();
            _CancelOrder_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _CancelOrder_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("marketId" in data && data.marketId != undefined) {
                    this.marketId = data.marketId;
                }
                if ("clientOrderId" in data && data.clientOrderId != undefined) {
                    this.clientOrderId = data.clientOrderId;
                }
                if ("requestId" in data && data.requestId != undefined) {
                    this.requestId = data.requestId;
                }
                if ("subaccountId" in data && data.subaccountId != undefined) {
                    this.subaccountId = data.subaccountId;
                }
            }
        }
        get marketId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0);
        }
        set marketId(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get clientOrderId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0);
        }
        set clientOrderId(value) {
            pb_1.Message.setField(this, 2, value);
        }
        get requestId() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0);
        }
        set requestId(value) {
            pb_1.Message.setField(this, 3, value);
        }
        get subaccountId() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0);
        }
        set subaccountId(value) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data) {
            const message = new CancelOrder({});
            if (data.marketId != null) {
                message.marketId = data.marketId;
            }
            if (data.clientOrderId != null) {
                message.clientOrderId = data.clientOrderId;
            }
            if (data.requestId != null) {
                message.requestId = data.requestId;
            }
            if (data.subaccountId != null) {
                message.subaccountId = data.subaccountId;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.marketId != null) {
                data.marketId = this.marketId;
            }
            if (this.clientOrderId != null) {
                data.clientOrderId = this.clientOrderId;
            }
            if (this.requestId != null) {
                data.requestId = this.requestId;
            }
            if (this.subaccountId != null) {
                data.subaccountId = this.subaccountId;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.marketId != 0)
                writer.writeUint64(1, this.marketId);
            if (this.clientOrderId != 0)
                writer.writeUint64(2, this.clientOrderId);
            if (this.requestId != 0)
                writer.writeUint64(3, this.requestId);
            if (this.subaccountId != 0)
                writer.writeUint64(4, this.subaccountId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CancelOrder();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.marketId = reader.readUint64();
                        break;
                    case 2:
                        message.clientOrderId = reader.readUint64();
                        break;
                    case 3:
                        message.requestId = reader.readUint64();
                        break;
                    case 4:
                        message.subaccountId = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return CancelOrder.deserialize(bytes);
        }
    }
    _CancelOrder_one_of_decls = new WeakMap();
    trade.CancelOrder = CancelOrder;
    class ModifyOrder extends pb_1.Message {
        constructor(data) {
            super();
            _ModifyOrder_one_of_decls.set(this, [[7]]);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _ModifyOrder_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("marketId" in data && data.marketId != undefined) {
                    this.marketId = data.marketId;
                }
                if ("clientOrderId" in data && data.clientOrderId != undefined) {
                    this.clientOrderId = data.clientOrderId;
                }
                if ("requestId" in data && data.requestId != undefined) {
                    this.requestId = data.requestId;
                }
                if ("newPrice" in data && data.newPrice != undefined) {
                    this.newPrice = data.newPrice;
                }
                if ("newQuantity" in data && data.newQuantity != undefined) {
                    this.newQuantity = data.newQuantity;
                }
                if ("subaccountId" in data && data.subaccountId != undefined) {
                    this.subaccountId = data.subaccountId;
                }
                if ("selfTradePrevention" in data && data.selfTradePrevention != undefined) {
                    this.selfTradePrevention = data.selfTradePrevention;
                }
                if ("postOnly" in data && data.postOnly != undefined) {
                    this.postOnly = data.postOnly;
                }
            }
        }
        get marketId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0);
        }
        set marketId(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get clientOrderId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0);
        }
        set clientOrderId(value) {
            pb_1.Message.setField(this, 2, value);
        }
        get requestId() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0);
        }
        set requestId(value) {
            pb_1.Message.setField(this, 3, value);
        }
        get newPrice() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0);
        }
        set newPrice(value) {
            pb_1.Message.setField(this, 4, value);
        }
        get newQuantity() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0);
        }
        set newQuantity(value) {
            pb_1.Message.setField(this, 5, value);
        }
        get subaccountId() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0);
        }
        set subaccountId(value) {
            pb_1.Message.setField(this, 6, value);
        }
        get selfTradePrevention() {
            return pb_1.Message.getFieldWithDefault(this, 7, SelfTradePrevention.CANCEL_RESTING);
        }
        set selfTradePrevention(value) {
            pb_1.Message.setOneofField(this, 7, __classPrivateFieldGet(this, _ModifyOrder_one_of_decls, "f")[0], value);
        }
        get has_selfTradePrevention() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get postOnly() {
            return pb_1.Message.getFieldWithDefault(this, 8, PostOnly.DISABLED);
        }
        set postOnly(value) {
            pb_1.Message.setField(this, 8, value);
        }
        get _selfTradePrevention() {
            const cases = {
                0: "none",
                7: "selfTradePrevention"
            };
            return cases[pb_1.Message.computeOneofCase(this, [7])];
        }
        static fromObject(data) {
            const message = new ModifyOrder({});
            if (data.marketId != null) {
                message.marketId = data.marketId;
            }
            if (data.clientOrderId != null) {
                message.clientOrderId = data.clientOrderId;
            }
            if (data.requestId != null) {
                message.requestId = data.requestId;
            }
            if (data.newPrice != null) {
                message.newPrice = data.newPrice;
            }
            if (data.newQuantity != null) {
                message.newQuantity = data.newQuantity;
            }
            if (data.subaccountId != null) {
                message.subaccountId = data.subaccountId;
            }
            if (data.selfTradePrevention != null) {
                message.selfTradePrevention = data.selfTradePrevention;
            }
            if (data.postOnly != null) {
                message.postOnly = data.postOnly;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.marketId != null) {
                data.marketId = this.marketId;
            }
            if (this.clientOrderId != null) {
                data.clientOrderId = this.clientOrderId;
            }
            if (this.requestId != null) {
                data.requestId = this.requestId;
            }
            if (this.newPrice != null) {
                data.newPrice = this.newPrice;
            }
            if (this.newQuantity != null) {
                data.newQuantity = this.newQuantity;
            }
            if (this.subaccountId != null) {
                data.subaccountId = this.subaccountId;
            }
            if (this.selfTradePrevention != null) {
                data.selfTradePrevention = this.selfTradePrevention;
            }
            if (this.postOnly != null) {
                data.postOnly = this.postOnly;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.marketId != 0)
                writer.writeUint64(1, this.marketId);
            if (this.clientOrderId != 0)
                writer.writeUint64(2, this.clientOrderId);
            if (this.requestId != 0)
                writer.writeUint64(3, this.requestId);
            if (this.newPrice != 0)
                writer.writeUint64(4, this.newPrice);
            if (this.newQuantity != 0)
                writer.writeUint64(5, this.newQuantity);
            if (this.subaccountId != 0)
                writer.writeUint64(6, this.subaccountId);
            if (this.has_selfTradePrevention)
                writer.writeEnum(7, this.selfTradePrevention);
            if (this.postOnly != PostOnly.DISABLED)
                writer.writeEnum(8, this.postOnly);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ModifyOrder();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.marketId = reader.readUint64();
                        break;
                    case 2:
                        message.clientOrderId = reader.readUint64();
                        break;
                    case 3:
                        message.requestId = reader.readUint64();
                        break;
                    case 4:
                        message.newPrice = reader.readUint64();
                        break;
                    case 5:
                        message.newQuantity = reader.readUint64();
                        break;
                    case 6:
                        message.subaccountId = reader.readUint64();
                        break;
                    case 7:
                        message.selfTradePrevention = reader.readEnum();
                        break;
                    case 8:
                        message.postOnly = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return ModifyOrder.deserialize(bytes);
        }
    }
    _ModifyOrder_one_of_decls = new WeakMap();
    trade.ModifyOrder = ModifyOrder;
    class MassCancel extends pb_1.Message {
        constructor(data) {
            super();
            _MassCancel_one_of_decls.set(this, [[3], [4]]);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _MassCancel_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("subaccountId" in data && data.subaccountId != undefined) {
                    this.subaccountId = data.subaccountId;
                }
                if ("requestId" in data && data.requestId != undefined) {
                    this.requestId = data.requestId;
                }
                if ("marketId" in data && data.marketId != undefined) {
                    this.marketId = data.marketId;
                }
                if ("side" in data && data.side != undefined) {
                    this.side = data.side;
                }
            }
        }
        get subaccountId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0);
        }
        set subaccountId(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get requestId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0);
        }
        set requestId(value) {
            pb_1.Message.setField(this, 2, value);
        }
        get marketId() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0);
        }
        set marketId(value) {
            pb_1.Message.setOneofField(this, 3, __classPrivateFieldGet(this, _MassCancel_one_of_decls, "f")[0], value);
        }
        get has_marketId() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get side() {
            return pb_1.Message.getFieldWithDefault(this, 4, Side.BID);
        }
        set side(value) {
            pb_1.Message.setOneofField(this, 4, __classPrivateFieldGet(this, _MassCancel_one_of_decls, "f")[1], value);
        }
        get has_side() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get _marketId() {
            const cases = {
                0: "none",
                3: "marketId"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _side() {
            const cases = {
                0: "none",
                4: "side"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        static fromObject(data) {
            const message = new MassCancel({});
            if (data.subaccountId != null) {
                message.subaccountId = data.subaccountId;
            }
            if (data.requestId != null) {
                message.requestId = data.requestId;
            }
            if (data.marketId != null) {
                message.marketId = data.marketId;
            }
            if (data.side != null) {
                message.side = data.side;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.subaccountId != null) {
                data.subaccountId = this.subaccountId;
            }
            if (this.requestId != null) {
                data.requestId = this.requestId;
            }
            if (this.marketId != null) {
                data.marketId = this.marketId;
            }
            if (this.side != null) {
                data.side = this.side;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.subaccountId != 0)
                writer.writeUint64(1, this.subaccountId);
            if (this.requestId != 0)
                writer.writeUint64(2, this.requestId);
            if (this.has_marketId)
                writer.writeUint64(3, this.marketId);
            if (this.has_side)
                writer.writeEnum(4, this.side);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MassCancel();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.subaccountId = reader.readUint64();
                        break;
                    case 2:
                        message.requestId = reader.readUint64();
                        break;
                    case 3:
                        message.marketId = reader.readUint64();
                        break;
                    case 4:
                        message.side = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return MassCancel.deserialize(bytes);
        }
    }
    _MassCancel_one_of_decls = new WeakMap();
    trade.MassCancel = MassCancel;
    class Heartbeat extends pb_1.Message {
        constructor(data) {
            super();
            _Heartbeat_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _Heartbeat_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("requestId" in data && data.requestId != undefined) {
                    this.requestId = data.requestId;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
            }
        }
        get requestId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0);
        }
        set requestId(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0);
        }
        set timestamp(value) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data) {
            const message = new Heartbeat({});
            if (data.requestId != null) {
                message.requestId = data.requestId;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.requestId != null) {
                data.requestId = this.requestId;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.requestId != 0)
                writer.writeUint64(1, this.requestId);
            if (this.timestamp != 0)
                writer.writeUint64(2, this.timestamp);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Heartbeat();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.requestId = reader.readUint64();
                        break;
                    case 2:
                        message.timestamp = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return Heartbeat.deserialize(bytes);
        }
    }
    _Heartbeat_one_of_decls = new WeakMap();
    trade.Heartbeat = Heartbeat;
    class OrderResponse extends pb_1.Message {
        constructor(data) {
            super();
            _OrderResponse_one_of_decls.set(this, [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _OrderResponse_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("newAck" in data && data.newAck != undefined) {
                    this.newAck = data.newAck;
                }
                if ("cancelAck" in data && data.cancelAck != undefined) {
                    this.cancelAck = data.cancelAck;
                }
                if ("modifyAck" in data && data.modifyAck != undefined) {
                    this.modifyAck = data.modifyAck;
                }
                if ("newReject" in data && data.newReject != undefined) {
                    this.newReject = data.newReject;
                }
                if ("cancelReject" in data && data.cancelReject != undefined) {
                    this.cancelReject = data.cancelReject;
                }
                if ("modifyReject" in data && data.modifyReject != undefined) {
                    this.modifyReject = data.modifyReject;
                }
                if ("fill" in data && data.fill != undefined) {
                    this.fill = data.fill;
                }
                if ("heartbeat" in data && data.heartbeat != undefined) {
                    this.heartbeat = data.heartbeat;
                }
                if ("position" in data && data.position != undefined) {
                    this.position = data.position;
                }
                if ("massCancelAck" in data && data.massCancelAck != undefined) {
                    this.massCancelAck = data.massCancelAck;
                }
            }
        }
        get newAck() {
            return pb_1.Message.getWrapperField(this, NewOrderAck, 1);
        }
        set newAck(value) {
            pb_1.Message.setOneofWrapperField(this, 1, __classPrivateFieldGet(this, _OrderResponse_one_of_decls, "f")[0], value);
        }
        get has_newAck() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get cancelAck() {
            return pb_1.Message.getWrapperField(this, CancelOrderAck, 2);
        }
        set cancelAck(value) {
            pb_1.Message.setOneofWrapperField(this, 2, __classPrivateFieldGet(this, _OrderResponse_one_of_decls, "f")[0], value);
        }
        get has_cancelAck() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get modifyAck() {
            return pb_1.Message.getWrapperField(this, ModifyOrderAck, 3);
        }
        set modifyAck(value) {
            pb_1.Message.setOneofWrapperField(this, 3, __classPrivateFieldGet(this, _OrderResponse_one_of_decls, "f")[0], value);
        }
        get has_modifyAck() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get newReject() {
            return pb_1.Message.getWrapperField(this, NewOrderReject, 4);
        }
        set newReject(value) {
            pb_1.Message.setOneofWrapperField(this, 4, __classPrivateFieldGet(this, _OrderResponse_one_of_decls, "f")[0], value);
        }
        get has_newReject() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get cancelReject() {
            return pb_1.Message.getWrapperField(this, CancelOrderReject, 5);
        }
        set cancelReject(value) {
            pb_1.Message.setOneofWrapperField(this, 5, __classPrivateFieldGet(this, _OrderResponse_one_of_decls, "f")[0], value);
        }
        get has_cancelReject() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get modifyReject() {
            return pb_1.Message.getWrapperField(this, ModifyOrderReject, 6);
        }
        set modifyReject(value) {
            pb_1.Message.setOneofWrapperField(this, 6, __classPrivateFieldGet(this, _OrderResponse_one_of_decls, "f")[0], value);
        }
        get has_modifyReject() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get fill() {
            return pb_1.Message.getWrapperField(this, Fill, 7);
        }
        set fill(value) {
            pb_1.Message.setOneofWrapperField(this, 7, __classPrivateFieldGet(this, _OrderResponse_one_of_decls, "f")[0], value);
        }
        get has_fill() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get heartbeat() {
            return pb_1.Message.getWrapperField(this, Heartbeat, 8);
        }
        set heartbeat(value) {
            pb_1.Message.setOneofWrapperField(this, 8, __classPrivateFieldGet(this, _OrderResponse_one_of_decls, "f")[0], value);
        }
        get has_heartbeat() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get position() {
            return pb_1.Message.getWrapperField(this, AssetPosition, 9);
        }
        set position(value) {
            pb_1.Message.setOneofWrapperField(this, 9, __classPrivateFieldGet(this, _OrderResponse_one_of_decls, "f")[0], value);
        }
        get has_position() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get massCancelAck() {
            return pb_1.Message.getWrapperField(this, MassCancelAck, 10);
        }
        set massCancelAck(value) {
            pb_1.Message.setOneofWrapperField(this, 10, __classPrivateFieldGet(this, _OrderResponse_one_of_decls, "f")[0], value);
        }
        get has_massCancelAck() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get inner() {
            const cases = {
                0: "none",
                1: "newAck",
                2: "cancelAck",
                3: "modifyAck",
                4: "newReject",
                5: "cancelReject",
                6: "modifyReject",
                7: "fill",
                8: "heartbeat",
                9: "position",
                10: "massCancelAck"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])];
        }
        static fromObject(data) {
            const message = new OrderResponse({});
            if (data.newAck != null) {
                message.newAck = NewOrderAck.fromObject(data.newAck);
            }
            if (data.cancelAck != null) {
                message.cancelAck = CancelOrderAck.fromObject(data.cancelAck);
            }
            if (data.modifyAck != null) {
                message.modifyAck = ModifyOrderAck.fromObject(data.modifyAck);
            }
            if (data.newReject != null) {
                message.newReject = NewOrderReject.fromObject(data.newReject);
            }
            if (data.cancelReject != null) {
                message.cancelReject = CancelOrderReject.fromObject(data.cancelReject);
            }
            if (data.modifyReject != null) {
                message.modifyReject = ModifyOrderReject.fromObject(data.modifyReject);
            }
            if (data.fill != null) {
                message.fill = Fill.fromObject(data.fill);
            }
            if (data.heartbeat != null) {
                message.heartbeat = Heartbeat.fromObject(data.heartbeat);
            }
            if (data.position != null) {
                message.position = AssetPosition.fromObject(data.position);
            }
            if (data.massCancelAck != null) {
                message.massCancelAck = MassCancelAck.fromObject(data.massCancelAck);
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.newAck != null) {
                data.newAck = this.newAck.toObject();
            }
            if (this.cancelAck != null) {
                data.cancelAck = this.cancelAck.toObject();
            }
            if (this.modifyAck != null) {
                data.modifyAck = this.modifyAck.toObject();
            }
            if (this.newReject != null) {
                data.newReject = this.newReject.toObject();
            }
            if (this.cancelReject != null) {
                data.cancelReject = this.cancelReject.toObject();
            }
            if (this.modifyReject != null) {
                data.modifyReject = this.modifyReject.toObject();
            }
            if (this.fill != null) {
                data.fill = this.fill.toObject();
            }
            if (this.heartbeat != null) {
                data.heartbeat = this.heartbeat.toObject();
            }
            if (this.position != null) {
                data.position = this.position.toObject();
            }
            if (this.massCancelAck != null) {
                data.massCancelAck = this.massCancelAck.toObject();
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_newAck)
                writer.writeMessage(1, this.newAck, () => this.newAck.serialize(writer));
            if (this.has_cancelAck)
                writer.writeMessage(2, this.cancelAck, () => this.cancelAck.serialize(writer));
            if (this.has_modifyAck)
                writer.writeMessage(3, this.modifyAck, () => this.modifyAck.serialize(writer));
            if (this.has_newReject)
                writer.writeMessage(4, this.newReject, () => this.newReject.serialize(writer));
            if (this.has_cancelReject)
                writer.writeMessage(5, this.cancelReject, () => this.cancelReject.serialize(writer));
            if (this.has_modifyReject)
                writer.writeMessage(6, this.modifyReject, () => this.modifyReject.serialize(writer));
            if (this.has_fill)
                writer.writeMessage(7, this.fill, () => this.fill.serialize(writer));
            if (this.has_heartbeat)
                writer.writeMessage(8, this.heartbeat, () => this.heartbeat.serialize(writer));
            if (this.has_position)
                writer.writeMessage(9, this.position, () => this.position.serialize(writer));
            if (this.has_massCancelAck)
                writer.writeMessage(10, this.massCancelAck, () => this.massCancelAck.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OrderResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.newAck, () => message.newAck = NewOrderAck.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.cancelAck, () => message.cancelAck = CancelOrderAck.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.modifyAck, () => message.modifyAck = ModifyOrderAck.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.newReject, () => message.newReject = NewOrderReject.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.cancelReject, () => message.cancelReject = CancelOrderReject.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.modifyReject, () => message.modifyReject = ModifyOrderReject.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.fill, () => message.fill = Fill.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.heartbeat, () => message.heartbeat = Heartbeat.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.position, () => message.position = AssetPosition.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.massCancelAck, () => message.massCancelAck = MassCancelAck.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return OrderResponse.deserialize(bytes);
        }
    }
    _OrderResponse_one_of_decls = new WeakMap();
    trade.OrderResponse = OrderResponse;
    class NewOrderAck extends pb_1.Message {
        constructor(data) {
            super();
            _NewOrderAck_one_of_decls.set(this, [[6]]);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _NewOrderAck_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("msgSeqNum" in data && data.msgSeqNum != undefined) {
                    this.msgSeqNum = data.msgSeqNum;
                }
                if ("clientOrderId" in data && data.clientOrderId != undefined) {
                    this.clientOrderId = data.clientOrderId;
                }
                if ("requestId" in data && data.requestId != undefined) {
                    this.requestId = data.requestId;
                }
                if ("exchangeOrderId" in data && data.exchangeOrderId != undefined) {
                    this.exchangeOrderId = data.exchangeOrderId;
                }
                if ("marketId" in data && data.marketId != undefined) {
                    this.marketId = data.marketId;
                }
                if ("price" in data && data.price != undefined) {
                    this.price = data.price;
                }
                if ("quantity" in data && data.quantity != undefined) {
                    this.quantity = data.quantity;
                }
                if ("side" in data && data.side != undefined) {
                    this.side = data.side;
                }
                if ("timeInForce" in data && data.timeInForce != undefined) {
                    this.timeInForce = data.timeInForce;
                }
                if ("orderType" in data && data.orderType != undefined) {
                    this.orderType = data.orderType;
                }
                if ("transactTime" in data && data.transactTime != undefined) {
                    this.transactTime = data.transactTime;
                }
                if ("subaccountId" in data && data.subaccountId != undefined) {
                    this.subaccountId = data.subaccountId;
                }
            }
        }
        get msgSeqNum() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0);
        }
        set msgSeqNum(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get clientOrderId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0);
        }
        set clientOrderId(value) {
            pb_1.Message.setField(this, 2, value);
        }
        get requestId() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0);
        }
        set requestId(value) {
            pb_1.Message.setField(this, 3, value);
        }
        get exchangeOrderId() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0);
        }
        set exchangeOrderId(value) {
            pb_1.Message.setField(this, 4, value);
        }
        get marketId() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0);
        }
        set marketId(value) {
            pb_1.Message.setField(this, 5, value);
        }
        get price() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0);
        }
        set price(value) {
            pb_1.Message.setOneofField(this, 6, __classPrivateFieldGet(this, _NewOrderAck_one_of_decls, "f")[0], value);
        }
        get has_price() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get quantity() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0);
        }
        set quantity(value) {
            pb_1.Message.setField(this, 7, value);
        }
        get side() {
            return pb_1.Message.getFieldWithDefault(this, 8, Side.BID);
        }
        set side(value) {
            pb_1.Message.setField(this, 8, value);
        }
        get timeInForce() {
            return pb_1.Message.getFieldWithDefault(this, 9, TimeInForce.IMMEDIATE_OR_CANCEL);
        }
        set timeInForce(value) {
            pb_1.Message.setField(this, 9, value);
        }
        get orderType() {
            return pb_1.Message.getFieldWithDefault(this, 10, OrderType.LIMIT);
        }
        set orderType(value) {
            pb_1.Message.setField(this, 10, value);
        }
        get transactTime() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0);
        }
        set transactTime(value) {
            pb_1.Message.setField(this, 11, value);
        }
        get subaccountId() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0);
        }
        set subaccountId(value) {
            pb_1.Message.setField(this, 12, value);
        }
        get _price() {
            const cases = {
                0: "none",
                6: "price"
            };
            return cases[pb_1.Message.computeOneofCase(this, [6])];
        }
        static fromObject(data) {
            const message = new NewOrderAck({});
            if (data.msgSeqNum != null) {
                message.msgSeqNum = data.msgSeqNum;
            }
            if (data.clientOrderId != null) {
                message.clientOrderId = data.clientOrderId;
            }
            if (data.requestId != null) {
                message.requestId = data.requestId;
            }
            if (data.exchangeOrderId != null) {
                message.exchangeOrderId = data.exchangeOrderId;
            }
            if (data.marketId != null) {
                message.marketId = data.marketId;
            }
            if (data.price != null) {
                message.price = data.price;
            }
            if (data.quantity != null) {
                message.quantity = data.quantity;
            }
            if (data.side != null) {
                message.side = data.side;
            }
            if (data.timeInForce != null) {
                message.timeInForce = data.timeInForce;
            }
            if (data.orderType != null) {
                message.orderType = data.orderType;
            }
            if (data.transactTime != null) {
                message.transactTime = data.transactTime;
            }
            if (data.subaccountId != null) {
                message.subaccountId = data.subaccountId;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.msgSeqNum != null) {
                data.msgSeqNum = this.msgSeqNum;
            }
            if (this.clientOrderId != null) {
                data.clientOrderId = this.clientOrderId;
            }
            if (this.requestId != null) {
                data.requestId = this.requestId;
            }
            if (this.exchangeOrderId != null) {
                data.exchangeOrderId = this.exchangeOrderId;
            }
            if (this.marketId != null) {
                data.marketId = this.marketId;
            }
            if (this.price != null) {
                data.price = this.price;
            }
            if (this.quantity != null) {
                data.quantity = this.quantity;
            }
            if (this.side != null) {
                data.side = this.side;
            }
            if (this.timeInForce != null) {
                data.timeInForce = this.timeInForce;
            }
            if (this.orderType != null) {
                data.orderType = this.orderType;
            }
            if (this.transactTime != null) {
                data.transactTime = this.transactTime;
            }
            if (this.subaccountId != null) {
                data.subaccountId = this.subaccountId;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.msgSeqNum != 0)
                writer.writeUint64(1, this.msgSeqNum);
            if (this.clientOrderId != 0)
                writer.writeUint64(2, this.clientOrderId);
            if (this.requestId != 0)
                writer.writeUint64(3, this.requestId);
            if (this.exchangeOrderId != 0)
                writer.writeUint64(4, this.exchangeOrderId);
            if (this.marketId != 0)
                writer.writeUint64(5, this.marketId);
            if (this.has_price)
                writer.writeUint64(6, this.price);
            if (this.quantity != 0)
                writer.writeUint64(7, this.quantity);
            if (this.side != Side.BID)
                writer.writeEnum(8, this.side);
            if (this.timeInForce != TimeInForce.IMMEDIATE_OR_CANCEL)
                writer.writeEnum(9, this.timeInForce);
            if (this.orderType != OrderType.LIMIT)
                writer.writeEnum(10, this.orderType);
            if (this.transactTime != 0)
                writer.writeUint64(11, this.transactTime);
            if (this.subaccountId != 0)
                writer.writeUint64(12, this.subaccountId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewOrderAck();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.msgSeqNum = reader.readUint64();
                        break;
                    case 2:
                        message.clientOrderId = reader.readUint64();
                        break;
                    case 3:
                        message.requestId = reader.readUint64();
                        break;
                    case 4:
                        message.exchangeOrderId = reader.readUint64();
                        break;
                    case 5:
                        message.marketId = reader.readUint64();
                        break;
                    case 6:
                        message.price = reader.readUint64();
                        break;
                    case 7:
                        message.quantity = reader.readUint64();
                        break;
                    case 8:
                        message.side = reader.readEnum();
                        break;
                    case 9:
                        message.timeInForce = reader.readEnum();
                        break;
                    case 10:
                        message.orderType = reader.readEnum();
                        break;
                    case 11:
                        message.transactTime = reader.readUint64();
                        break;
                    case 12:
                        message.subaccountId = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return NewOrderAck.deserialize(bytes);
        }
    }
    _NewOrderAck_one_of_decls = new WeakMap();
    trade.NewOrderAck = NewOrderAck;
    class CancelOrderAck extends pb_1.Message {
        constructor(data) {
            super();
            _CancelOrderAck_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _CancelOrderAck_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("msgSeqNum" in data && data.msgSeqNum != undefined) {
                    this.msgSeqNum = data.msgSeqNum;
                }
                if ("clientOrderId" in data && data.clientOrderId != undefined) {
                    this.clientOrderId = data.clientOrderId;
                }
                if ("requestId" in data && data.requestId != undefined) {
                    this.requestId = data.requestId;
                }
                if ("transactTime" in data && data.transactTime != undefined) {
                    this.transactTime = data.transactTime;
                }
                if ("subaccountId" in data && data.subaccountId != undefined) {
                    this.subaccountId = data.subaccountId;
                }
                if ("reason" in data && data.reason != undefined) {
                    this.reason = data.reason;
                }
                if ("marketId" in data && data.marketId != undefined) {
                    this.marketId = data.marketId;
                }
            }
        }
        get msgSeqNum() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0);
        }
        set msgSeqNum(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get clientOrderId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0);
        }
        set clientOrderId(value) {
            pb_1.Message.setField(this, 2, value);
        }
        get requestId() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0);
        }
        set requestId(value) {
            pb_1.Message.setField(this, 3, value);
        }
        get transactTime() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0);
        }
        set transactTime(value) {
            pb_1.Message.setField(this, 4, value);
        }
        get subaccountId() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0);
        }
        set subaccountId(value) {
            pb_1.Message.setField(this, 5, value);
        }
        get reason() {
            return pb_1.Message.getFieldWithDefault(this, 6, CancelOrderAck.Reason.UNCLASSIFIED);
        }
        set reason(value) {
            pb_1.Message.setField(this, 6, value);
        }
        get marketId() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0);
        }
        set marketId(value) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data) {
            const message = new CancelOrderAck({});
            if (data.msgSeqNum != null) {
                message.msgSeqNum = data.msgSeqNum;
            }
            if (data.clientOrderId != null) {
                message.clientOrderId = data.clientOrderId;
            }
            if (data.requestId != null) {
                message.requestId = data.requestId;
            }
            if (data.transactTime != null) {
                message.transactTime = data.transactTime;
            }
            if (data.subaccountId != null) {
                message.subaccountId = data.subaccountId;
            }
            if (data.reason != null) {
                message.reason = data.reason;
            }
            if (data.marketId != null) {
                message.marketId = data.marketId;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.msgSeqNum != null) {
                data.msgSeqNum = this.msgSeqNum;
            }
            if (this.clientOrderId != null) {
                data.clientOrderId = this.clientOrderId;
            }
            if (this.requestId != null) {
                data.requestId = this.requestId;
            }
            if (this.transactTime != null) {
                data.transactTime = this.transactTime;
            }
            if (this.subaccountId != null) {
                data.subaccountId = this.subaccountId;
            }
            if (this.reason != null) {
                data.reason = this.reason;
            }
            if (this.marketId != null) {
                data.marketId = this.marketId;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.msgSeqNum != 0)
                writer.writeUint64(1, this.msgSeqNum);
            if (this.clientOrderId != 0)
                writer.writeUint64(2, this.clientOrderId);
            if (this.requestId != 0)
                writer.writeUint64(3, this.requestId);
            if (this.transactTime != 0)
                writer.writeUint64(4, this.transactTime);
            if (this.subaccountId != 0)
                writer.writeUint64(5, this.subaccountId);
            if (this.reason != CancelOrderAck.Reason.UNCLASSIFIED)
                writer.writeEnum(6, this.reason);
            if (this.marketId != 0)
                writer.writeUint64(7, this.marketId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CancelOrderAck();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.msgSeqNum = reader.readUint64();
                        break;
                    case 2:
                        message.clientOrderId = reader.readUint64();
                        break;
                    case 3:
                        message.requestId = reader.readUint64();
                        break;
                    case 4:
                        message.transactTime = reader.readUint64();
                        break;
                    case 5:
                        message.subaccountId = reader.readUint64();
                        break;
                    case 6:
                        message.reason = reader.readEnum();
                        break;
                    case 7:
                        message.marketId = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return CancelOrderAck.deserialize(bytes);
        }
    }
    _CancelOrderAck_one_of_decls = new WeakMap();
    trade.CancelOrderAck = CancelOrderAck;
    (function (CancelOrderAck) {
        let Reason;
        (function (Reason) {
            Reason[Reason["UNCLASSIFIED"] = 0] = "UNCLASSIFIED";
            Reason[Reason["DISCONNECT"] = 1] = "DISCONNECT";
            Reason[Reason["REQUESTED"] = 2] = "REQUESTED";
            Reason[Reason["IOC"] = 3] = "IOC";
            Reason[Reason["STP_RESTING"] = 4] = "STP_RESTING";
            Reason[Reason["STP_AGGRESSING"] = 5] = "STP_AGGRESSING";
            Reason[Reason["MASS_CANCEL"] = 6] = "MASS_CANCEL";
        })(Reason = CancelOrderAck.Reason || (CancelOrderAck.Reason = {}));
    })(CancelOrderAck = trade.CancelOrderAck || (trade.CancelOrderAck = {}));
    class ModifyOrderAck extends pb_1.Message {
        constructor(data) {
            super();
            _ModifyOrderAck_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _ModifyOrderAck_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("msgSeqNum" in data && data.msgSeqNum != undefined) {
                    this.msgSeqNum = data.msgSeqNum;
                }
                if ("clientOrderId" in data && data.clientOrderId != undefined) {
                    this.clientOrderId = data.clientOrderId;
                }
                if ("requestId" in data && data.requestId != undefined) {
                    this.requestId = data.requestId;
                }
                if ("transactTime" in data && data.transactTime != undefined) {
                    this.transactTime = data.transactTime;
                }
                if ("newQuantity" in data && data.newQuantity != undefined) {
                    this.newQuantity = data.newQuantity;
                }
                if ("subaccountId" in data && data.subaccountId != undefined) {
                    this.subaccountId = data.subaccountId;
                }
                if ("marketId" in data && data.marketId != undefined) {
                    this.marketId = data.marketId;
                }
                if ("price" in data && data.price != undefined) {
                    this.price = data.price;
                }
            }
        }
        get msgSeqNum() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0);
        }
        set msgSeqNum(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get clientOrderId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0);
        }
        set clientOrderId(value) {
            pb_1.Message.setField(this, 2, value);
        }
        get requestId() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0);
        }
        set requestId(value) {
            pb_1.Message.setField(this, 3, value);
        }
        get transactTime() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0);
        }
        set transactTime(value) {
            pb_1.Message.setField(this, 4, value);
        }
        get newQuantity() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0);
        }
        set newQuantity(value) {
            pb_1.Message.setField(this, 5, value);
        }
        get subaccountId() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0);
        }
        set subaccountId(value) {
            pb_1.Message.setField(this, 6, value);
        }
        get marketId() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0);
        }
        set marketId(value) {
            pb_1.Message.setField(this, 7, value);
        }
        get price() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0);
        }
        set price(value) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data) {
            const message = new ModifyOrderAck({});
            if (data.msgSeqNum != null) {
                message.msgSeqNum = data.msgSeqNum;
            }
            if (data.clientOrderId != null) {
                message.clientOrderId = data.clientOrderId;
            }
            if (data.requestId != null) {
                message.requestId = data.requestId;
            }
            if (data.transactTime != null) {
                message.transactTime = data.transactTime;
            }
            if (data.newQuantity != null) {
                message.newQuantity = data.newQuantity;
            }
            if (data.subaccountId != null) {
                message.subaccountId = data.subaccountId;
            }
            if (data.marketId != null) {
                message.marketId = data.marketId;
            }
            if (data.price != null) {
                message.price = data.price;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.msgSeqNum != null) {
                data.msgSeqNum = this.msgSeqNum;
            }
            if (this.clientOrderId != null) {
                data.clientOrderId = this.clientOrderId;
            }
            if (this.requestId != null) {
                data.requestId = this.requestId;
            }
            if (this.transactTime != null) {
                data.transactTime = this.transactTime;
            }
            if (this.newQuantity != null) {
                data.newQuantity = this.newQuantity;
            }
            if (this.subaccountId != null) {
                data.subaccountId = this.subaccountId;
            }
            if (this.marketId != null) {
                data.marketId = this.marketId;
            }
            if (this.price != null) {
                data.price = this.price;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.msgSeqNum != 0)
                writer.writeUint64(1, this.msgSeqNum);
            if (this.clientOrderId != 0)
                writer.writeUint64(2, this.clientOrderId);
            if (this.requestId != 0)
                writer.writeUint64(3, this.requestId);
            if (this.transactTime != 0)
                writer.writeUint64(4, this.transactTime);
            if (this.newQuantity != 0)
                writer.writeUint64(5, this.newQuantity);
            if (this.subaccountId != 0)
                writer.writeUint64(6, this.subaccountId);
            if (this.marketId != 0)
                writer.writeUint64(7, this.marketId);
            if (this.price != 0)
                writer.writeUint64(8, this.price);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ModifyOrderAck();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.msgSeqNum = reader.readUint64();
                        break;
                    case 2:
                        message.clientOrderId = reader.readUint64();
                        break;
                    case 3:
                        message.requestId = reader.readUint64();
                        break;
                    case 4:
                        message.transactTime = reader.readUint64();
                        break;
                    case 5:
                        message.newQuantity = reader.readUint64();
                        break;
                    case 6:
                        message.subaccountId = reader.readUint64();
                        break;
                    case 7:
                        message.marketId = reader.readUint64();
                        break;
                    case 8:
                        message.price = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return ModifyOrderAck.deserialize(bytes);
        }
    }
    _ModifyOrderAck_one_of_decls = new WeakMap();
    trade.ModifyOrderAck = ModifyOrderAck;
    class MassCancelAck extends pb_1.Message {
        constructor(data) {
            super();
            _MassCancelAck_one_of_decls.set(this, [[6]]);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _MassCancelAck_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("msgSeqNum" in data && data.msgSeqNum != undefined) {
                    this.msgSeqNum = data.msgSeqNum;
                }
                if ("subaccountId" in data && data.subaccountId != undefined) {
                    this.subaccountId = data.subaccountId;
                }
                if ("requestId" in data && data.requestId != undefined) {
                    this.requestId = data.requestId;
                }
                if ("transactTime" in data && data.transactTime != undefined) {
                    this.transactTime = data.transactTime;
                }
                if ("reason" in data && data.reason != undefined) {
                    this.reason = data.reason;
                }
                if ("totalAffectedOrders" in data && data.totalAffectedOrders != undefined) {
                    this.totalAffectedOrders = data.totalAffectedOrders;
                }
            }
        }
        get msgSeqNum() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0);
        }
        set msgSeqNum(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get subaccountId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0);
        }
        set subaccountId(value) {
            pb_1.Message.setField(this, 2, value);
        }
        get requestId() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0);
        }
        set requestId(value) {
            pb_1.Message.setField(this, 3, value);
        }
        get transactTime() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0);
        }
        set transactTime(value) {
            pb_1.Message.setField(this, 4, value);
        }
        get reason() {
            return pb_1.Message.getFieldWithDefault(this, 6, MassCancelAck.Reason.UNCLASSIFIED);
        }
        set reason(value) {
            pb_1.Message.setOneofField(this, 6, __classPrivateFieldGet(this, _MassCancelAck_one_of_decls, "f")[0], value);
        }
        get has_reason() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get totalAffectedOrders() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0);
        }
        set totalAffectedOrders(value) {
            pb_1.Message.setField(this, 7, value);
        }
        get _reason() {
            const cases = {
                0: "none",
                6: "reason"
            };
            return cases[pb_1.Message.computeOneofCase(this, [6])];
        }
        static fromObject(data) {
            const message = new MassCancelAck({});
            if (data.msgSeqNum != null) {
                message.msgSeqNum = data.msgSeqNum;
            }
            if (data.subaccountId != null) {
                message.subaccountId = data.subaccountId;
            }
            if (data.requestId != null) {
                message.requestId = data.requestId;
            }
            if (data.transactTime != null) {
                message.transactTime = data.transactTime;
            }
            if (data.reason != null) {
                message.reason = data.reason;
            }
            if (data.totalAffectedOrders != null) {
                message.totalAffectedOrders = data.totalAffectedOrders;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.msgSeqNum != null) {
                data.msgSeqNum = this.msgSeqNum;
            }
            if (this.subaccountId != null) {
                data.subaccountId = this.subaccountId;
            }
            if (this.requestId != null) {
                data.requestId = this.requestId;
            }
            if (this.transactTime != null) {
                data.transactTime = this.transactTime;
            }
            if (this.reason != null) {
                data.reason = this.reason;
            }
            if (this.totalAffectedOrders != null) {
                data.totalAffectedOrders = this.totalAffectedOrders;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.msgSeqNum != 0)
                writer.writeUint64(1, this.msgSeqNum);
            if (this.subaccountId != 0)
                writer.writeUint64(2, this.subaccountId);
            if (this.requestId != 0)
                writer.writeUint64(3, this.requestId);
            if (this.transactTime != 0)
                writer.writeUint64(4, this.transactTime);
            if (this.has_reason)
                writer.writeEnum(6, this.reason);
            if (this.totalAffectedOrders != 0)
                writer.writeUint32(7, this.totalAffectedOrders);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MassCancelAck();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.msgSeqNum = reader.readUint64();
                        break;
                    case 2:
                        message.subaccountId = reader.readUint64();
                        break;
                    case 3:
                        message.requestId = reader.readUint64();
                        break;
                    case 4:
                        message.transactTime = reader.readUint64();
                        break;
                    case 6:
                        message.reason = reader.readEnum();
                        break;
                    case 7:
                        message.totalAffectedOrders = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return MassCancelAck.deserialize(bytes);
        }
    }
    _MassCancelAck_one_of_decls = new WeakMap();
    trade.MassCancelAck = MassCancelAck;
    (function (MassCancelAck) {
        let Reason;
        (function (Reason) {
            Reason[Reason["UNCLASSIFIED"] = 0] = "UNCLASSIFIED";
            Reason[Reason["INVALID_MARKET_ID"] = 1] = "INVALID_MARKET_ID";
            Reason[Reason["INVALID_SIDE"] = 2] = "INVALID_SIDE";
        })(Reason = MassCancelAck.Reason || (MassCancelAck.Reason = {}));
    })(MassCancelAck = trade.MassCancelAck || (trade.MassCancelAck = {}));
    class NewOrderReject extends pb_1.Message {
        constructor(data) {
            super();
            _NewOrderReject_one_of_decls.set(this, [[8]]);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _NewOrderReject_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("msgSeqNum" in data && data.msgSeqNum != undefined) {
                    this.msgSeqNum = data.msgSeqNum;
                }
                if ("clientOrderId" in data && data.clientOrderId != undefined) {
                    this.clientOrderId = data.clientOrderId;
                }
                if ("requestId" in data && data.requestId != undefined) {
                    this.requestId = data.requestId;
                }
                if ("transactTime" in data && data.transactTime != undefined) {
                    this.transactTime = data.transactTime;
                }
                if ("subaccountId" in data && data.subaccountId != undefined) {
                    this.subaccountId = data.subaccountId;
                }
                if ("reason" in data && data.reason != undefined) {
                    this.reason = data.reason;
                }
                if ("marketId" in data && data.marketId != undefined) {
                    this.marketId = data.marketId;
                }
                if ("price" in data && data.price != undefined) {
                    this.price = data.price;
                }
                if ("quantity" in data && data.quantity != undefined) {
                    this.quantity = data.quantity;
                }
                if ("side" in data && data.side != undefined) {
                    this.side = data.side;
                }
                if ("timeInForce" in data && data.timeInForce != undefined) {
                    this.timeInForce = data.timeInForce;
                }
                if ("orderType" in data && data.orderType != undefined) {
                    this.orderType = data.orderType;
                }
            }
        }
        get msgSeqNum() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0);
        }
        set msgSeqNum(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get clientOrderId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0);
        }
        set clientOrderId(value) {
            pb_1.Message.setField(this, 2, value);
        }
        get requestId() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0);
        }
        set requestId(value) {
            pb_1.Message.setField(this, 3, value);
        }
        get transactTime() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0);
        }
        set transactTime(value) {
            pb_1.Message.setField(this, 4, value);
        }
        get subaccountId() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0);
        }
        set subaccountId(value) {
            pb_1.Message.setField(this, 5, value);
        }
        get reason() {
            return pb_1.Message.getFieldWithDefault(this, 6, NewOrderReject.Reason.UNCLASSIFIED);
        }
        set reason(value) {
            pb_1.Message.setField(this, 6, value);
        }
        get marketId() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0);
        }
        set marketId(value) {
            pb_1.Message.setField(this, 7, value);
        }
        get price() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0);
        }
        set price(value) {
            pb_1.Message.setOneofField(this, 8, __classPrivateFieldGet(this, _NewOrderReject_one_of_decls, "f")[0], value);
        }
        get has_price() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get quantity() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0);
        }
        set quantity(value) {
            pb_1.Message.setField(this, 9, value);
        }
        get side() {
            return pb_1.Message.getFieldWithDefault(this, 10, Side.BID);
        }
        set side(value) {
            pb_1.Message.setField(this, 10, value);
        }
        get timeInForce() {
            return pb_1.Message.getFieldWithDefault(this, 11, TimeInForce.IMMEDIATE_OR_CANCEL);
        }
        set timeInForce(value) {
            pb_1.Message.setField(this, 11, value);
        }
        get orderType() {
            return pb_1.Message.getFieldWithDefault(this, 12, OrderType.LIMIT);
        }
        set orderType(value) {
            pb_1.Message.setField(this, 12, value);
        }
        get _price() {
            const cases = {
                0: "none",
                8: "price"
            };
            return cases[pb_1.Message.computeOneofCase(this, [8])];
        }
        static fromObject(data) {
            const message = new NewOrderReject({});
            if (data.msgSeqNum != null) {
                message.msgSeqNum = data.msgSeqNum;
            }
            if (data.clientOrderId != null) {
                message.clientOrderId = data.clientOrderId;
            }
            if (data.requestId != null) {
                message.requestId = data.requestId;
            }
            if (data.transactTime != null) {
                message.transactTime = data.transactTime;
            }
            if (data.subaccountId != null) {
                message.subaccountId = data.subaccountId;
            }
            if (data.reason != null) {
                message.reason = data.reason;
            }
            if (data.marketId != null) {
                message.marketId = data.marketId;
            }
            if (data.price != null) {
                message.price = data.price;
            }
            if (data.quantity != null) {
                message.quantity = data.quantity;
            }
            if (data.side != null) {
                message.side = data.side;
            }
            if (data.timeInForce != null) {
                message.timeInForce = data.timeInForce;
            }
            if (data.orderType != null) {
                message.orderType = data.orderType;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.msgSeqNum != null) {
                data.msgSeqNum = this.msgSeqNum;
            }
            if (this.clientOrderId != null) {
                data.clientOrderId = this.clientOrderId;
            }
            if (this.requestId != null) {
                data.requestId = this.requestId;
            }
            if (this.transactTime != null) {
                data.transactTime = this.transactTime;
            }
            if (this.subaccountId != null) {
                data.subaccountId = this.subaccountId;
            }
            if (this.reason != null) {
                data.reason = this.reason;
            }
            if (this.marketId != null) {
                data.marketId = this.marketId;
            }
            if (this.price != null) {
                data.price = this.price;
            }
            if (this.quantity != null) {
                data.quantity = this.quantity;
            }
            if (this.side != null) {
                data.side = this.side;
            }
            if (this.timeInForce != null) {
                data.timeInForce = this.timeInForce;
            }
            if (this.orderType != null) {
                data.orderType = this.orderType;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.msgSeqNum != 0)
                writer.writeUint64(1, this.msgSeqNum);
            if (this.clientOrderId != 0)
                writer.writeUint64(2, this.clientOrderId);
            if (this.requestId != 0)
                writer.writeUint64(3, this.requestId);
            if (this.transactTime != 0)
                writer.writeUint64(4, this.transactTime);
            if (this.subaccountId != 0)
                writer.writeUint64(5, this.subaccountId);
            if (this.reason != NewOrderReject.Reason.UNCLASSIFIED)
                writer.writeEnum(6, this.reason);
            if (this.marketId != 0)
                writer.writeUint64(7, this.marketId);
            if (this.has_price)
                writer.writeUint64(8, this.price);
            if (this.quantity != 0)
                writer.writeUint64(9, this.quantity);
            if (this.side != Side.BID)
                writer.writeEnum(10, this.side);
            if (this.timeInForce != TimeInForce.IMMEDIATE_OR_CANCEL)
                writer.writeEnum(11, this.timeInForce);
            if (this.orderType != OrderType.LIMIT)
                writer.writeEnum(12, this.orderType);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewOrderReject();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.msgSeqNum = reader.readUint64();
                        break;
                    case 2:
                        message.clientOrderId = reader.readUint64();
                        break;
                    case 3:
                        message.requestId = reader.readUint64();
                        break;
                    case 4:
                        message.transactTime = reader.readUint64();
                        break;
                    case 5:
                        message.subaccountId = reader.readUint64();
                        break;
                    case 6:
                        message.reason = reader.readEnum();
                        break;
                    case 7:
                        message.marketId = reader.readUint64();
                        break;
                    case 8:
                        message.price = reader.readUint64();
                        break;
                    case 9:
                        message.quantity = reader.readUint64();
                        break;
                    case 10:
                        message.side = reader.readEnum();
                        break;
                    case 11:
                        message.timeInForce = reader.readEnum();
                        break;
                    case 12:
                        message.orderType = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return NewOrderReject.deserialize(bytes);
        }
    }
    _NewOrderReject_one_of_decls = new WeakMap();
    trade.NewOrderReject = NewOrderReject;
    (function (NewOrderReject) {
        let Reason;
        (function (Reason) {
            Reason[Reason["UNCLASSIFIED"] = 0] = "UNCLASSIFIED";
            Reason[Reason["INVALID_QUANTITY"] = 1] = "INVALID_QUANTITY";
            Reason[Reason["INVALID_MARKET_ID"] = 2] = "INVALID_MARKET_ID";
            Reason[Reason["DUPLICATE_ORDER_ID"] = 3] = "DUPLICATE_ORDER_ID";
            Reason[Reason["INVALID_SIDE"] = 4] = "INVALID_SIDE";
            Reason[Reason["INVALID_TIME_IN_FORCE"] = 5] = "INVALID_TIME_IN_FORCE";
            Reason[Reason["INVALID_ORDER_TYPE"] = 6] = "INVALID_ORDER_TYPE";
            Reason[Reason["INVALID_POST_ONLY"] = 7] = "INVALID_POST_ONLY";
            Reason[Reason["INVALID_SELF_TRADE_PREVENTION"] = 8] = "INVALID_SELF_TRADE_PREVENTION";
            Reason[Reason["UNKNOWN_TRADER"] = 9] = "UNKNOWN_TRADER";
            Reason[Reason["PRICE_WITH_MARKET_ORDER"] = 10] = "PRICE_WITH_MARKET_ORDER";
            Reason[Reason["POST_ONLY_WITH_MARKET_ORDER"] = 11] = "POST_ONLY_WITH_MARKET_ORDER";
            Reason[Reason["POST_ONLY_WITH_INVALID_TIF"] = 12] = "POST_ONLY_WITH_INVALID_TIF";
            Reason[Reason["EXCEEDED_SPOT_POSITION"] = 13] = "EXCEEDED_SPOT_POSITION";
            Reason[Reason["NO_OPPOSING_LIMIT_ORDER"] = 14] = "NO_OPPOSING_LIMIT_ORDER";
            Reason[Reason["POST_ONLY_WOULD_TRADE"] = 15] = "POST_ONLY_WOULD_TRADE";
            Reason[Reason["DID_NOT_FULLY_FILL"] = 16] = "DID_NOT_FULLY_FILL";
        })(Reason = NewOrderReject.Reason || (NewOrderReject.Reason = {}));
    })(NewOrderReject = trade.NewOrderReject || (trade.NewOrderReject = {}));
    class CancelOrderReject extends pb_1.Message {
        constructor(data) {
            super();
            _CancelOrderReject_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _CancelOrderReject_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("msgSeqNum" in data && data.msgSeqNum != undefined) {
                    this.msgSeqNum = data.msgSeqNum;
                }
                if ("clientOrderId" in data && data.clientOrderId != undefined) {
                    this.clientOrderId = data.clientOrderId;
                }
                if ("requestId" in data && data.requestId != undefined) {
                    this.requestId = data.requestId;
                }
                if ("transactTime" in data && data.transactTime != undefined) {
                    this.transactTime = data.transactTime;
                }
                if ("subaccountId" in data && data.subaccountId != undefined) {
                    this.subaccountId = data.subaccountId;
                }
                if ("reason" in data && data.reason != undefined) {
                    this.reason = data.reason;
                }
                if ("marketId" in data && data.marketId != undefined) {
                    this.marketId = data.marketId;
                }
            }
        }
        get msgSeqNum() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0);
        }
        set msgSeqNum(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get clientOrderId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0);
        }
        set clientOrderId(value) {
            pb_1.Message.setField(this, 2, value);
        }
        get requestId() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0);
        }
        set requestId(value) {
            pb_1.Message.setField(this, 3, value);
        }
        get transactTime() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0);
        }
        set transactTime(value) {
            pb_1.Message.setField(this, 4, value);
        }
        get subaccountId() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0);
        }
        set subaccountId(value) {
            pb_1.Message.setField(this, 5, value);
        }
        get reason() {
            return pb_1.Message.getFieldWithDefault(this, 6, CancelOrderReject.Reason.UNCLASSIFIED);
        }
        set reason(value) {
            pb_1.Message.setField(this, 6, value);
        }
        get marketId() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0);
        }
        set marketId(value) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data) {
            const message = new CancelOrderReject({});
            if (data.msgSeqNum != null) {
                message.msgSeqNum = data.msgSeqNum;
            }
            if (data.clientOrderId != null) {
                message.clientOrderId = data.clientOrderId;
            }
            if (data.requestId != null) {
                message.requestId = data.requestId;
            }
            if (data.transactTime != null) {
                message.transactTime = data.transactTime;
            }
            if (data.subaccountId != null) {
                message.subaccountId = data.subaccountId;
            }
            if (data.reason != null) {
                message.reason = data.reason;
            }
            if (data.marketId != null) {
                message.marketId = data.marketId;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.msgSeqNum != null) {
                data.msgSeqNum = this.msgSeqNum;
            }
            if (this.clientOrderId != null) {
                data.clientOrderId = this.clientOrderId;
            }
            if (this.requestId != null) {
                data.requestId = this.requestId;
            }
            if (this.transactTime != null) {
                data.transactTime = this.transactTime;
            }
            if (this.subaccountId != null) {
                data.subaccountId = this.subaccountId;
            }
            if (this.reason != null) {
                data.reason = this.reason;
            }
            if (this.marketId != null) {
                data.marketId = this.marketId;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.msgSeqNum != 0)
                writer.writeUint64(1, this.msgSeqNum);
            if (this.clientOrderId != 0)
                writer.writeUint64(2, this.clientOrderId);
            if (this.requestId != 0)
                writer.writeUint64(3, this.requestId);
            if (this.transactTime != 0)
                writer.writeUint64(4, this.transactTime);
            if (this.subaccountId != 0)
                writer.writeUint64(5, this.subaccountId);
            if (this.reason != CancelOrderReject.Reason.UNCLASSIFIED)
                writer.writeEnum(6, this.reason);
            if (this.marketId != 0)
                writer.writeUint64(7, this.marketId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CancelOrderReject();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.msgSeqNum = reader.readUint64();
                        break;
                    case 2:
                        message.clientOrderId = reader.readUint64();
                        break;
                    case 3:
                        message.requestId = reader.readUint64();
                        break;
                    case 4:
                        message.transactTime = reader.readUint64();
                        break;
                    case 5:
                        message.subaccountId = reader.readUint64();
                        break;
                    case 6:
                        message.reason = reader.readEnum();
                        break;
                    case 7:
                        message.marketId = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return CancelOrderReject.deserialize(bytes);
        }
    }
    _CancelOrderReject_one_of_decls = new WeakMap();
    trade.CancelOrderReject = CancelOrderReject;
    (function (CancelOrderReject) {
        let Reason;
        (function (Reason) {
            Reason[Reason["UNCLASSIFIED"] = 0] = "UNCLASSIFIED";
            Reason[Reason["INVALID_MARKET_ID"] = 1] = "INVALID_MARKET_ID";
            Reason[Reason["ORDER_NOT_FOUND"] = 2] = "ORDER_NOT_FOUND";
        })(Reason = CancelOrderReject.Reason || (CancelOrderReject.Reason = {}));
    })(CancelOrderReject = trade.CancelOrderReject || (trade.CancelOrderReject = {}));
    class ModifyOrderReject extends pb_1.Message {
        constructor(data) {
            super();
            _ModifyOrderReject_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _ModifyOrderReject_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("msgSeqNum" in data && data.msgSeqNum != undefined) {
                    this.msgSeqNum = data.msgSeqNum;
                }
                if ("clientOrderId" in data && data.clientOrderId != undefined) {
                    this.clientOrderId = data.clientOrderId;
                }
                if ("requestId" in data && data.requestId != undefined) {
                    this.requestId = data.requestId;
                }
                if ("transactTime" in data && data.transactTime != undefined) {
                    this.transactTime = data.transactTime;
                }
                if ("subaccountId" in data && data.subaccountId != undefined) {
                    this.subaccountId = data.subaccountId;
                }
                if ("reason" in data && data.reason != undefined) {
                    this.reason = data.reason;
                }
                if ("marketId" in data && data.marketId != undefined) {
                    this.marketId = data.marketId;
                }
            }
        }
        get msgSeqNum() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0);
        }
        set msgSeqNum(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get clientOrderId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0);
        }
        set clientOrderId(value) {
            pb_1.Message.setField(this, 2, value);
        }
        get requestId() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0);
        }
        set requestId(value) {
            pb_1.Message.setField(this, 3, value);
        }
        get transactTime() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0);
        }
        set transactTime(value) {
            pb_1.Message.setField(this, 4, value);
        }
        get subaccountId() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0);
        }
        set subaccountId(value) {
            pb_1.Message.setField(this, 5, value);
        }
        get reason() {
            return pb_1.Message.getFieldWithDefault(this, 6, ModifyOrderReject.Reason.UNCLASSIFIED);
        }
        set reason(value) {
            pb_1.Message.setField(this, 6, value);
        }
        get marketId() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0);
        }
        set marketId(value) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data) {
            const message = new ModifyOrderReject({});
            if (data.msgSeqNum != null) {
                message.msgSeqNum = data.msgSeqNum;
            }
            if (data.clientOrderId != null) {
                message.clientOrderId = data.clientOrderId;
            }
            if (data.requestId != null) {
                message.requestId = data.requestId;
            }
            if (data.transactTime != null) {
                message.transactTime = data.transactTime;
            }
            if (data.subaccountId != null) {
                message.subaccountId = data.subaccountId;
            }
            if (data.reason != null) {
                message.reason = data.reason;
            }
            if (data.marketId != null) {
                message.marketId = data.marketId;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.msgSeqNum != null) {
                data.msgSeqNum = this.msgSeqNum;
            }
            if (this.clientOrderId != null) {
                data.clientOrderId = this.clientOrderId;
            }
            if (this.requestId != null) {
                data.requestId = this.requestId;
            }
            if (this.transactTime != null) {
                data.transactTime = this.transactTime;
            }
            if (this.subaccountId != null) {
                data.subaccountId = this.subaccountId;
            }
            if (this.reason != null) {
                data.reason = this.reason;
            }
            if (this.marketId != null) {
                data.marketId = this.marketId;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.msgSeqNum != 0)
                writer.writeUint64(1, this.msgSeqNum);
            if (this.clientOrderId != 0)
                writer.writeUint64(2, this.clientOrderId);
            if (this.requestId != 0)
                writer.writeUint64(3, this.requestId);
            if (this.transactTime != 0)
                writer.writeUint64(4, this.transactTime);
            if (this.subaccountId != 0)
                writer.writeUint64(5, this.subaccountId);
            if (this.reason != ModifyOrderReject.Reason.UNCLASSIFIED)
                writer.writeEnum(6, this.reason);
            if (this.marketId != 0)
                writer.writeUint64(7, this.marketId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ModifyOrderReject();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.msgSeqNum = reader.readUint64();
                        break;
                    case 2:
                        message.clientOrderId = reader.readUint64();
                        break;
                    case 3:
                        message.requestId = reader.readUint64();
                        break;
                    case 4:
                        message.transactTime = reader.readUint64();
                        break;
                    case 5:
                        message.subaccountId = reader.readUint64();
                        break;
                    case 6:
                        message.reason = reader.readEnum();
                        break;
                    case 7:
                        message.marketId = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return ModifyOrderReject.deserialize(bytes);
        }
    }
    _ModifyOrderReject_one_of_decls = new WeakMap();
    trade.ModifyOrderReject = ModifyOrderReject;
    (function (ModifyOrderReject) {
        let Reason;
        (function (Reason) {
            Reason[Reason["UNCLASSIFIED"] = 0] = "UNCLASSIFIED";
            Reason[Reason["INVALID_QUANTITY"] = 1] = "INVALID_QUANTITY";
            Reason[Reason["INVALID_MARKET_ID"] = 2] = "INVALID_MARKET_ID";
            Reason[Reason["ORDER_NOT_FOUND"] = 3] = "ORDER_NOT_FOUND";
            Reason[Reason["INVALID_IFM"] = 4] = "INVALID_IFM";
            Reason[Reason["INVALID_POST_ONLY"] = 5] = "INVALID_POST_ONLY";
            Reason[Reason["INVALID_SELF_TRADE_PREVENTION"] = 6] = "INVALID_SELF_TRADE_PREVENTION";
            Reason[Reason["UNKNOWN_TRADER"] = 7] = "UNKNOWN_TRADER";
            Reason[Reason["EXCEEDED_SPOT_POSITION"] = 8] = "EXCEEDED_SPOT_POSITION";
            Reason[Reason["POST_ONLY_WOULD_TRADE"] = 9] = "POST_ONLY_WOULD_TRADE";
        })(Reason = ModifyOrderReject.Reason || (ModifyOrderReject.Reason = {}));
    })(ModifyOrderReject = trade.ModifyOrderReject || (trade.ModifyOrderReject = {}));
    class Fill extends pb_1.Message {
        constructor(data) {
            super();
            _Fill_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _Fill_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("msgSeqNum" in data && data.msgSeqNum != undefined) {
                    this.msgSeqNum = data.msgSeqNum;
                }
                if ("marketId" in data && data.marketId != undefined) {
                    this.marketId = data.marketId;
                }
                if ("clientOrderId" in data && data.clientOrderId != undefined) {
                    this.clientOrderId = data.clientOrderId;
                }
                if ("exchangeOrderId" in data && data.exchangeOrderId != undefined) {
                    this.exchangeOrderId = data.exchangeOrderId;
                }
                if ("fillPrice" in data && data.fillPrice != undefined) {
                    this.fillPrice = data.fillPrice;
                }
                if ("fillQuantity" in data && data.fillQuantity != undefined) {
                    this.fillQuantity = data.fillQuantity;
                }
                if ("leavesQuantity" in data && data.leavesQuantity != undefined) {
                    this.leavesQuantity = data.leavesQuantity;
                }
                if ("transactTime" in data && data.transactTime != undefined) {
                    this.transactTime = data.transactTime;
                }
                if ("subaccountId" in data && data.subaccountId != undefined) {
                    this.subaccountId = data.subaccountId;
                }
            }
        }
        get msgSeqNum() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0);
        }
        set msgSeqNum(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get marketId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0);
        }
        set marketId(value) {
            pb_1.Message.setField(this, 2, value);
        }
        get clientOrderId() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0);
        }
        set clientOrderId(value) {
            pb_1.Message.setField(this, 3, value);
        }
        get exchangeOrderId() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0);
        }
        set exchangeOrderId(value) {
            pb_1.Message.setField(this, 4, value);
        }
        get fillPrice() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0);
        }
        set fillPrice(value) {
            pb_1.Message.setField(this, 5, value);
        }
        get fillQuantity() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0);
        }
        set fillQuantity(value) {
            pb_1.Message.setField(this, 6, value);
        }
        get leavesQuantity() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0);
        }
        set leavesQuantity(value) {
            pb_1.Message.setField(this, 7, value);
        }
        get transactTime() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0);
        }
        set transactTime(value) {
            pb_1.Message.setField(this, 8, value);
        }
        get subaccountId() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0);
        }
        set subaccountId(value) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data) {
            const message = new Fill({});
            if (data.msgSeqNum != null) {
                message.msgSeqNum = data.msgSeqNum;
            }
            if (data.marketId != null) {
                message.marketId = data.marketId;
            }
            if (data.clientOrderId != null) {
                message.clientOrderId = data.clientOrderId;
            }
            if (data.exchangeOrderId != null) {
                message.exchangeOrderId = data.exchangeOrderId;
            }
            if (data.fillPrice != null) {
                message.fillPrice = data.fillPrice;
            }
            if (data.fillQuantity != null) {
                message.fillQuantity = data.fillQuantity;
            }
            if (data.leavesQuantity != null) {
                message.leavesQuantity = data.leavesQuantity;
            }
            if (data.transactTime != null) {
                message.transactTime = data.transactTime;
            }
            if (data.subaccountId != null) {
                message.subaccountId = data.subaccountId;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.msgSeqNum != null) {
                data.msgSeqNum = this.msgSeqNum;
            }
            if (this.marketId != null) {
                data.marketId = this.marketId;
            }
            if (this.clientOrderId != null) {
                data.clientOrderId = this.clientOrderId;
            }
            if (this.exchangeOrderId != null) {
                data.exchangeOrderId = this.exchangeOrderId;
            }
            if (this.fillPrice != null) {
                data.fillPrice = this.fillPrice;
            }
            if (this.fillQuantity != null) {
                data.fillQuantity = this.fillQuantity;
            }
            if (this.leavesQuantity != null) {
                data.leavesQuantity = this.leavesQuantity;
            }
            if (this.transactTime != null) {
                data.transactTime = this.transactTime;
            }
            if (this.subaccountId != null) {
                data.subaccountId = this.subaccountId;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.msgSeqNum != 0)
                writer.writeUint64(1, this.msgSeqNum);
            if (this.marketId != 0)
                writer.writeUint64(2, this.marketId);
            if (this.clientOrderId != 0)
                writer.writeUint64(3, this.clientOrderId);
            if (this.exchangeOrderId != 0)
                writer.writeUint64(4, this.exchangeOrderId);
            if (this.fillPrice != 0)
                writer.writeUint64(5, this.fillPrice);
            if (this.fillQuantity != 0)
                writer.writeUint64(6, this.fillQuantity);
            if (this.leavesQuantity != 0)
                writer.writeUint64(7, this.leavesQuantity);
            if (this.transactTime != 0)
                writer.writeUint64(8, this.transactTime);
            if (this.subaccountId != 0)
                writer.writeUint64(9, this.subaccountId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Fill();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.msgSeqNum = reader.readUint64();
                        break;
                    case 2:
                        message.marketId = reader.readUint64();
                        break;
                    case 3:
                        message.clientOrderId = reader.readUint64();
                        break;
                    case 4:
                        message.exchangeOrderId = reader.readUint64();
                        break;
                    case 5:
                        message.fillPrice = reader.readUint64();
                        break;
                    case 6:
                        message.fillQuantity = reader.readUint64();
                        break;
                    case 7:
                        message.leavesQuantity = reader.readUint64();
                        break;
                    case 8:
                        message.transactTime = reader.readUint64();
                        break;
                    case 9:
                        message.subaccountId = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return Fill.deserialize(bytes);
        }
    }
    _Fill_one_of_decls = new WeakMap();
    trade.Fill = Fill;
    class AssetPosition extends pb_1.Message {
        constructor(data) {
            super();
            _AssetPosition_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _AssetPosition_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("subaccountId" in data && data.subaccountId != undefined) {
                    this.subaccountId = data.subaccountId;
                }
                if ("assetId" in data && data.assetId != undefined) {
                    this.assetId = data.assetId;
                }
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
                if ("available" in data && data.available != undefined) {
                    this.available = data.available;
                }
            }
        }
        get subaccountId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0);
        }
        set subaccountId(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get assetId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0);
        }
        set assetId(value) {
            pb_1.Message.setField(this, 2, value);
        }
        get total() {
            return pb_1.Message.getWrapperField(this, RawUnits, 3);
        }
        set total(value) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_total() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get available() {
            return pb_1.Message.getWrapperField(this, RawUnits, 4);
        }
        set available(value) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_available() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data) {
            const message = new AssetPosition({});
            if (data.subaccountId != null) {
                message.subaccountId = data.subaccountId;
            }
            if (data.assetId != null) {
                message.assetId = data.assetId;
            }
            if (data.total != null) {
                message.total = RawUnits.fromObject(data.total);
            }
            if (data.available != null) {
                message.available = RawUnits.fromObject(data.available);
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.subaccountId != null) {
                data.subaccountId = this.subaccountId;
            }
            if (this.assetId != null) {
                data.assetId = this.assetId;
            }
            if (this.total != null) {
                data.total = this.total.toObject();
            }
            if (this.available != null) {
                data.available = this.available.toObject();
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.subaccountId != 0)
                writer.writeUint64(1, this.subaccountId);
            if (this.assetId != 0)
                writer.writeUint64(2, this.assetId);
            if (this.has_total)
                writer.writeMessage(3, this.total, () => this.total.serialize(writer));
            if (this.has_available)
                writer.writeMessage(4, this.available, () => this.available.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssetPosition();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.subaccountId = reader.readUint64();
                        break;
                    case 2:
                        message.assetId = reader.readUint64();
                        break;
                    case 3:
                        reader.readMessage(message.total, () => message.total = RawUnits.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.available, () => message.available = RawUnits.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return AssetPosition.deserialize(bytes);
        }
    }
    _AssetPosition_one_of_decls = new WeakMap();
    trade.AssetPosition = AssetPosition;
    class RawUnits extends pb_1.Message {
        constructor(data) {
            super();
            _RawUnits_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _RawUnits_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("word0" in data && data.word0 != undefined) {
                    this.word0 = data.word0;
                }
                if ("word1" in data && data.word1 != undefined) {
                    this.word1 = data.word1;
                }
                if ("word2" in data && data.word2 != undefined) {
                    this.word2 = data.word2;
                }
                if ("word3" in data && data.word3 != undefined) {
                    this.word3 = data.word3;
                }
            }
        }
        get word0() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0);
        }
        set word0(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get word1() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0);
        }
        set word1(value) {
            pb_1.Message.setField(this, 2, value);
        }
        get word2() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0);
        }
        set word2(value) {
            pb_1.Message.setField(this, 3, value);
        }
        get word3() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0);
        }
        set word3(value) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data) {
            const message = new RawUnits({});
            if (data.word0 != null) {
                message.word0 = data.word0;
            }
            if (data.word1 != null) {
                message.word1 = data.word1;
            }
            if (data.word2 != null) {
                message.word2 = data.word2;
            }
            if (data.word3 != null) {
                message.word3 = data.word3;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.word0 != null) {
                data.word0 = this.word0;
            }
            if (this.word1 != null) {
                data.word1 = this.word1;
            }
            if (this.word2 != null) {
                data.word2 = this.word2;
            }
            if (this.word3 != null) {
                data.word3 = this.word3;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.word0 != 0)
                writer.writeUint64(1, this.word0);
            if (this.word1 != 0)
                writer.writeUint64(2, this.word1);
            if (this.word2 != 0)
                writer.writeUint64(3, this.word2);
            if (this.word3 != 0)
                writer.writeUint64(4, this.word3);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RawUnits();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.word0 = reader.readUint64();
                        break;
                    case 2:
                        message.word1 = reader.readUint64();
                        break;
                    case 3:
                        message.word2 = reader.readUint64();
                        break;
                    case 4:
                        message.word3 = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return RawUnits.deserialize(bytes);
        }
    }
    _RawUnits_one_of_decls = new WeakMap();
    trade.RawUnits = RawUnits;
    class Bootstrap extends pb_1.Message {
        constructor(data) {
            super();
            _Bootstrap_one_of_decls.set(this, [[1, 2, 3]]);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _Bootstrap_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("done" in data && data.done != undefined) {
                    this.done = data.done;
                }
                if ("resting" in data && data.resting != undefined) {
                    this.resting = data.resting;
                }
                if ("position" in data && data.position != undefined) {
                    this.position = data.position;
                }
            }
        }
        get done() {
            return pb_1.Message.getWrapperField(this, Done, 1);
        }
        set done(value) {
            pb_1.Message.setOneofWrapperField(this, 1, __classPrivateFieldGet(this, _Bootstrap_one_of_decls, "f")[0], value);
        }
        get has_done() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get resting() {
            return pb_1.Message.getWrapperField(this, RestingOrders, 2);
        }
        set resting(value) {
            pb_1.Message.setOneofWrapperField(this, 2, __classPrivateFieldGet(this, _Bootstrap_one_of_decls, "f")[0], value);
        }
        get has_resting() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get position() {
            return pb_1.Message.getWrapperField(this, AssetPositions, 3);
        }
        set position(value) {
            pb_1.Message.setOneofWrapperField(this, 3, __classPrivateFieldGet(this, _Bootstrap_one_of_decls, "f")[0], value);
        }
        get has_position() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get inner() {
            const cases = {
                0: "none",
                1: "done",
                2: "resting",
                3: "position"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3])];
        }
        static fromObject(data) {
            const message = new Bootstrap({});
            if (data.done != null) {
                message.done = Done.fromObject(data.done);
            }
            if (data.resting != null) {
                message.resting = RestingOrders.fromObject(data.resting);
            }
            if (data.position != null) {
                message.position = AssetPositions.fromObject(data.position);
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.done != null) {
                data.done = this.done.toObject();
            }
            if (this.resting != null) {
                data.resting = this.resting.toObject();
            }
            if (this.position != null) {
                data.position = this.position.toObject();
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_done)
                writer.writeMessage(1, this.done, () => this.done.serialize(writer));
            if (this.has_resting)
                writer.writeMessage(2, this.resting, () => this.resting.serialize(writer));
            if (this.has_position)
                writer.writeMessage(3, this.position, () => this.position.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Bootstrap();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.done, () => message.done = Done.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.resting, () => message.resting = RestingOrders.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.position, () => message.position = AssetPositions.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return Bootstrap.deserialize(bytes);
        }
    }
    _Bootstrap_one_of_decls = new WeakMap();
    trade.Bootstrap = Bootstrap;
    class RestingOrders extends pb_1.Message {
        constructor(data) {
            super();
            _RestingOrders_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], __classPrivateFieldGet(this, _RestingOrders_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("orders" in data && data.orders != undefined) {
                    this.orders = data.orders;
                }
            }
        }
        get orders() {
            return pb_1.Message.getRepeatedWrapperField(this, RestingOrder, 1);
        }
        set orders(value) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data) {
            const message = new RestingOrders({});
            if (data.orders != null) {
                message.orders = data.orders.map(item => RestingOrder.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.orders != null) {
                data.orders = this.orders.map((item) => item.toObject());
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.orders.length)
                writer.writeRepeatedMessage(1, this.orders, (item) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RestingOrders();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.orders, () => pb_1.Message.addToRepeatedWrapperField(message, 1, RestingOrder.deserialize(reader), RestingOrder));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return RestingOrders.deserialize(bytes);
        }
    }
    _RestingOrders_one_of_decls = new WeakMap();
    trade.RestingOrders = RestingOrders;
    class AssetPositions extends pb_1.Message {
        constructor(data) {
            super();
            _AssetPositions_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], __classPrivateFieldGet(this, _AssetPositions_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("positions" in data && data.positions != undefined) {
                    this.positions = data.positions;
                }
            }
        }
        get positions() {
            return pb_1.Message.getRepeatedWrapperField(this, AssetPosition, 1);
        }
        set positions(value) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data) {
            const message = new AssetPositions({});
            if (data.positions != null) {
                message.positions = data.positions.map(item => AssetPosition.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.positions != null) {
                data.positions = this.positions.map((item) => item.toObject());
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.positions.length)
                writer.writeRepeatedMessage(1, this.positions, (item) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssetPositions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.positions, () => pb_1.Message.addToRepeatedWrapperField(message, 1, AssetPosition.deserialize(reader), AssetPosition));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return AssetPositions.deserialize(bytes);
        }
    }
    _AssetPositions_one_of_decls = new WeakMap();
    trade.AssetPositions = AssetPositions;
    class Done extends pb_1.Message {
        constructor(data) {
            super();
            _Done_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _Done_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("latestTransactTime" in data && data.latestTransactTime != undefined) {
                    this.latestTransactTime = data.latestTransactTime;
                }
            }
        }
        get latestTransactTime() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0);
        }
        set latestTransactTime(value) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data) {
            const message = new Done({});
            if (data.latestTransactTime != null) {
                message.latestTransactTime = data.latestTransactTime;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.latestTransactTime != null) {
                data.latestTransactTime = this.latestTransactTime;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.latestTransactTime != 0)
                writer.writeUint64(1, this.latestTransactTime);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Done();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.latestTransactTime = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return Done.deserialize(bytes);
        }
    }
    _Done_one_of_decls = new WeakMap();
    trade.Done = Done;
    class RestingOrder extends pb_1.Message {
        constructor(data) {
            super();
            _RestingOrder_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _RestingOrder_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("clientOrderId" in data && data.clientOrderId != undefined) {
                    this.clientOrderId = data.clientOrderId;
                }
                if ("exchangeOrderId" in data && data.exchangeOrderId != undefined) {
                    this.exchangeOrderId = data.exchangeOrderId;
                }
                if ("marketId" in data && data.marketId != undefined) {
                    this.marketId = data.marketId;
                }
                if ("price" in data && data.price != undefined) {
                    this.price = data.price;
                }
                if ("originalQuantity" in data && data.originalQuantity != undefined) {
                    this.originalQuantity = data.originalQuantity;
                }
                if ("side" in data && data.side != undefined) {
                    this.side = data.side;
                }
                if ("timeInForce" in data && data.timeInForce != undefined) {
                    this.timeInForce = data.timeInForce;
                }
                if ("orderType" in data && data.orderType != undefined) {
                    this.orderType = data.orderType;
                }
                if ("remainingQuantity" in data && data.remainingQuantity != undefined) {
                    this.remainingQuantity = data.remainingQuantity;
                }
                if ("restTime" in data && data.restTime != undefined) {
                    this.restTime = data.restTime;
                }
                if ("subaccountId" in data && data.subaccountId != undefined) {
                    this.subaccountId = data.subaccountId;
                }
            }
        }
        get clientOrderId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0);
        }
        set clientOrderId(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get exchangeOrderId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0);
        }
        set exchangeOrderId(value) {
            pb_1.Message.setField(this, 2, value);
        }
        get marketId() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0);
        }
        set marketId(value) {
            pb_1.Message.setField(this, 3, value);
        }
        get price() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0);
        }
        set price(value) {
            pb_1.Message.setField(this, 4, value);
        }
        get originalQuantity() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0);
        }
        set originalQuantity(value) {
            pb_1.Message.setField(this, 5, value);
        }
        get side() {
            return pb_1.Message.getFieldWithDefault(this, 6, Side.BID);
        }
        set side(value) {
            pb_1.Message.setField(this, 6, value);
        }
        get timeInForce() {
            return pb_1.Message.getFieldWithDefault(this, 7, TimeInForce.IMMEDIATE_OR_CANCEL);
        }
        set timeInForce(value) {
            pb_1.Message.setField(this, 7, value);
        }
        get orderType() {
            return pb_1.Message.getFieldWithDefault(this, 8, OrderType.LIMIT);
        }
        set orderType(value) {
            pb_1.Message.setField(this, 8, value);
        }
        get remainingQuantity() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0);
        }
        set remainingQuantity(value) {
            pb_1.Message.setField(this, 9, value);
        }
        get restTime() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0);
        }
        set restTime(value) {
            pb_1.Message.setField(this, 10, value);
        }
        get subaccountId() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0);
        }
        set subaccountId(value) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data) {
            const message = new RestingOrder({});
            if (data.clientOrderId != null) {
                message.clientOrderId = data.clientOrderId;
            }
            if (data.exchangeOrderId != null) {
                message.exchangeOrderId = data.exchangeOrderId;
            }
            if (data.marketId != null) {
                message.marketId = data.marketId;
            }
            if (data.price != null) {
                message.price = data.price;
            }
            if (data.originalQuantity != null) {
                message.originalQuantity = data.originalQuantity;
            }
            if (data.side != null) {
                message.side = data.side;
            }
            if (data.timeInForce != null) {
                message.timeInForce = data.timeInForce;
            }
            if (data.orderType != null) {
                message.orderType = data.orderType;
            }
            if (data.remainingQuantity != null) {
                message.remainingQuantity = data.remainingQuantity;
            }
            if (data.restTime != null) {
                message.restTime = data.restTime;
            }
            if (data.subaccountId != null) {
                message.subaccountId = data.subaccountId;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.clientOrderId != null) {
                data.clientOrderId = this.clientOrderId;
            }
            if (this.exchangeOrderId != null) {
                data.exchangeOrderId = this.exchangeOrderId;
            }
            if (this.marketId != null) {
                data.marketId = this.marketId;
            }
            if (this.price != null) {
                data.price = this.price;
            }
            if (this.originalQuantity != null) {
                data.originalQuantity = this.originalQuantity;
            }
            if (this.side != null) {
                data.side = this.side;
            }
            if (this.timeInForce != null) {
                data.timeInForce = this.timeInForce;
            }
            if (this.orderType != null) {
                data.orderType = this.orderType;
            }
            if (this.remainingQuantity != null) {
                data.remainingQuantity = this.remainingQuantity;
            }
            if (this.restTime != null) {
                data.restTime = this.restTime;
            }
            if (this.subaccountId != null) {
                data.subaccountId = this.subaccountId;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.clientOrderId != 0)
                writer.writeUint64(1, this.clientOrderId);
            if (this.exchangeOrderId != 0)
                writer.writeUint64(2, this.exchangeOrderId);
            if (this.marketId != 0)
                writer.writeUint64(3, this.marketId);
            if (this.price != 0)
                writer.writeUint64(4, this.price);
            if (this.originalQuantity != 0)
                writer.writeUint64(5, this.originalQuantity);
            if (this.side != Side.BID)
                writer.writeEnum(6, this.side);
            if (this.timeInForce != TimeInForce.IMMEDIATE_OR_CANCEL)
                writer.writeEnum(7, this.timeInForce);
            if (this.orderType != OrderType.LIMIT)
                writer.writeEnum(8, this.orderType);
            if (this.remainingQuantity != 0)
                writer.writeUint64(9, this.remainingQuantity);
            if (this.restTime != 0)
                writer.writeUint64(10, this.restTime);
            if (this.subaccountId != 0)
                writer.writeUint64(11, this.subaccountId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RestingOrder();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.clientOrderId = reader.readUint64();
                        break;
                    case 2:
                        message.exchangeOrderId = reader.readUint64();
                        break;
                    case 3:
                        message.marketId = reader.readUint64();
                        break;
                    case 4:
                        message.price = reader.readUint64();
                        break;
                    case 5:
                        message.originalQuantity = reader.readUint64();
                        break;
                    case 6:
                        message.side = reader.readEnum();
                        break;
                    case 7:
                        message.timeInForce = reader.readEnum();
                        break;
                    case 8:
                        message.orderType = reader.readEnum();
                        break;
                    case 9:
                        message.remainingQuantity = reader.readUint64();
                        break;
                    case 10:
                        message.restTime = reader.readUint64();
                        break;
                    case 11:
                        message.subaccountId = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return RestingOrder.deserialize(bytes);
        }
    }
    _RestingOrder_one_of_decls = new WeakMap();
    trade.RestingOrder = RestingOrder;
})(trade || (trade = {}));
