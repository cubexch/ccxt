# -*- coding: utf-8 -*-

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

from ccxt.async_support.base.exchange import Exchange
from ccxt.abstract.cube import ImplicitAPI


class cube(Exchange, ImplicitAPI):

    def describe(self):
        return self.deep_extend(super(cube, self).describe(), {
            'id': 'cube',
            'name': 'Cube Exchange',
            'countries': ['AU', 'PL'],
            'version': 'v1',
            # 'rateLimit': 100,
            'pro': True,
            'has': {
                'CORS': None,
                'spot': True,
                'margin': False,
                'swap': False,
                'future': False,
                'option': False,
                'cancelAllOrders': False,
                'cancelOrder': True,
                'cancelOrders': False,
                'createOrder': True,
                'editOrder': False,
                'fetchBalance': True,
                'fetchBorrowRate': False,
                'fetchBorrowRateHistories': False,
                'fetchBorrowRateHistory': False,
                'fetchBorrowRates': False,
                'fetchClosedOrders': False,
                'fetchCurrencies': False,
                'fetchDepositAddress': False,
                'fetchDeposits': False,
                'fetchFundingHistory': False,
                'fetchFundingRate': False,
                'fetchFundingRateHistory': False,
                'fetchFundingRates': False,
                'fetchIndexOHLCV': False,
                'fetchMarginMode': False,
                'fetchMarkets': True,
                'fetchMarkOHLCV': False,
                'fetchMyTrades': True,
                'fetchOHLCV': True,
                'fetchOpenInterestHistory': False,
                'fetchOpenOrders': True,
                'fetchOrder': True,
                'fetchOrderBook': True,
                'fetchOrders': False,
                'fetchOrderTrades': True,
                'fetchPositionMode': False,
                'fetchPositions': False,
                'fetchPremiumIndexOHLCV': False,
                'fetchTicker': True,
                'fetchTickers': True,
                'fetchTime': False,
                'fetchTrades': False,
                'fetchTradingFee': False,
                'fetchTradingFees': False,
                'fetchTransactionFees': False,
                'fetchTransactions': False,
                'fetchTransfer': False,
                'fetchTransfers': False,
                'fetchWithdrawal': False,
                'fetchWithdrawals': False,
                'setLeverage': False,
                'setMarginMode': False,
                'transfer': False,
                'withdraw': False,
                'ws': False,
            },
            'timeframes': {
                '1m': 1,
                '5m': 5,
                '10m': 10,
                '30m': 10,
                '1h': 60,
                '2h': 120,
                '4h': 240,
                '8h': 480,
                '12h': 720,
                '1d': 24,
                '1w': 70,
                '1M': 31,
            },
            'urls': {
                'logo': 'https://avatars.githubusercontent.com/u/128435657?s=200&v=4',
                'api': {
                    'http': 'https://cube.exchange/',
                },
                'www': 'https://cube.exchange/',
                'doc': [
                    'https://cube.exchange/docs',
                ],
            },
            'requiredCredentials': {
                'apiKey': True,
                'secret': True,
            },
            'api': {
                'public': {
                    'get': [
                        'ir/v0/markets',
                        'test',
                    ],
                },
                'private': {
                    'post': [
                    ],
                },
            },
            'fees': {
                'trading': {
                    'percentage': True,
                    'maker': self.parse_number('0.0'),
                    'taker': self.parse_number('0.0'),
                },
            },
            'options': {
                'brokerId': 'ccxt',
            },
            'commonCurrencies': {
            },
        })

    async def fetch_markets(self, params={}):
        # {
        #     "result": {
        #         "assets": [
        #             {
        #                 "assetId": 1,
        #                 "symbol": "BTC",
        #                 "decimals": 8,
        #                 "displayDecimals": 5,
        #                 "transactionExplorer": "https://mempool.space/tx/{}",
        #                 "addressExplorer": "https://mempool.space/address/{}",
        #                 "settles": True,
        #                 "assetType": "Crypto",
        #                 "sourceId": 1,
        #                 "metadata": {
        #                     "asset": {
        #                         "dustAmount": 3000
        #                     },
        #                     "source": {
        #                         "network": "Mainnet",
        #                         "scope": "bitcoin",
        #                         "type": "mainnet"
        #                     }
        #                 }
        #             },
        #         <array truncated>
        #         ],
        #         "markets": [
        #             {
        #                 "symbol": "ETHBTC",
        #                 "marketId": 100001,
        #                 "baseAssetId": 2,
        #                 "baseLotSize": "0x0000000000000000000000000000000000038d7ea4c68000",
        #                 "quoteAssetId": 1,
        #                 "quoteLotSize": "0x000000000000000000000000000000000000000000000001",
        #                 "priceDisplayDecimals": 5,
        #                 "protectionPriceLevels": 1000,
        #                 "priceTickSize": "0.00001",
        #                 "quantityTickSize": "0.001"
        #             }
        #          <array truncated>
        #         ]
        #     }
        # }
        response = await self.publicGetIrV0Markets()
        markets = response['markets']
        assets = response['assets']
        result = []
        for i in range(0, len(markets)):
            market = markets[i]
            # check if baseStr is None
            base = self.safe_string(assets, market.baseAssetId)
            quote = self.safe_string(assets, market.quoteAssetId)
            symbol = market.symbol
            result.append({
                'id': self.safe_integer(market, 'marketId'),
                'uppercaseId': None,
                'symbol': symbol,
                'base': base,
                'baseId': self.safe_integer(market, market.baseAssetId),
                'quote': quote,
                'quoteId': self.safe_integer(market, market.quoteAssetId),
                'settle': None,
                'settleId': None,
                'type': 'spot',
                'spot': True,
                'margin': False,
                'swap': False,
                'future': False,
                'option': False,
                'derivative': False,
                'contract': False,
                'linear': None,
                'inverse': None,
                'contractSize': None,
                'expiry': None,
                'expiryDatetime': None,
                'strike': None,
                'optionType': None,
                'limits': {
                    'amount': {
                        'min': self.safe_number(market, 'minLimitBaseAmount'),
                        'max': self.safe_number(market, 'maxLimitBaseAmount'),
                    },
                    'price': {
                        'min': None,
                        'max': None,
                    },
                    'cost': {
                        'min': None,
                        'max': None,
                    },
                    'leverage': {
                        'min': None,
                        'max': None,
                    },
                },
                'precision': {
                    'price': self.parse_number(self.parse_precision(self.safe_string(market, 'quotePrecision'))),
                    'amount': self.parse_number(self.parse_precision(self.safe_string(market, 'basePrecision'))),
                },
                'active': None,
                'created': None,
                'info': market,
            })
        return result

    async def fetch_assets(self):
        response = await self.publicGetIrV0Markets()
        assets = response['markets']
        result = []
        for i in range(0, len(assets)):
            # TODO: properly parse assets
            asset = assets[i]
            result.append(asset)
        return False
