<?php

namespace ccxt\async;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\async\abstract\cube as Exchange;
use React\Async;

class cube extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'cube',
            'name' => 'Cube Exchange',
            'countries' => array( 'AU', 'PL' ),
            'version' => 'v1',
            // 'rateLimit' => 100,
            'pro' => true,
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => false,
                'swap' => false,
                'future' => false,
                'option' => false,
                'cancelAllOrders' => false,
                'cancelOrder' => true,
                'cancelOrders' => false,
                'createOrder' => true,
                'editOrder' => false,
                'fetchBalance' => true,
                'fetchBorrowRate' => false,
                'fetchBorrowRateHistories' => false,
                'fetchBorrowRateHistory' => false,
                'fetchBorrowRates' => false,
                'fetchClosedOrders' => false,
                'fetchCurrencies' => false,
                'fetchDepositAddress' => false,
                'fetchDeposits' => false,
                'fetchFundingHistory' => false,
                'fetchFundingRate' => false,
                'fetchFundingRateHistory' => false,
                'fetchFundingRates' => false,
                'fetchIndexOHLCV' => false,
                'fetchMarginMode' => false,
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => false,
                'fetchMyTrades' => true,
                'fetchOHLCV' => true,
                'fetchOpenInterestHistory' => false,
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchOrders' => false,
                'fetchOrderTrades' => true,
                'fetchPositionMode' => false,
                'fetchPositions' => false,
                'fetchPremiumIndexOHLCV' => false,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => false,
                'fetchTrades' => false,
                'fetchTradingFee' => false,
                'fetchTradingFees' => false,
                'fetchTransactionFees' => false,
                'fetchTransactions' => false,
                'fetchTransfer' => false,
                'fetchTransfers' => false,
                'fetchWithdrawal' => false,
                'fetchWithdrawals' => false,
                'setLeverage' => false,
                'setMarginMode' => false,
                'transfer' => false,
                'withdraw' => false,
                'ws' => false,
            ),
            'timeframes' => array(
                '1m' => 1,
                '5m' => 5,
                '10m' => 10,
                '30m' => 10,
                '1h' => 60,
                '2h' => 120,
                '4h' => 240,
                '8h' => 480,
                '12h' => 720,
                '1d' => 24,
                '1w' => 70,
                '1M' => 31,
            ),
            'urls' => array(
                'logo' => 'https://avatars.githubusercontent.com/u/128435657?s=200&v=4',
                'api' => array(
                    'http' => 'https://cube.exchange/',
                ),
                'www' => 'https://cube.exchange/',
                'doc' => array(
                    'https://cube.exchange/docs',
                ),
            ),
            'requiredCredentials' => array(
                'apiKey' => true,
                'secret' => true,
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        'ir/v0/markets',
                        'test',
                    ),
                ),
                'private' => array(
                    'post' => array(
                    ),
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'percentage' => true,
                    'maker' => $this->parse_number('0.0'),
                    'taker' => $this->parse_number('0.0'),
                ),
            ),
            'options' => array(
                'brokerId' => 'ccxt',
            ),
            'commonCurrencies' => array(
            ),
        ));
    }

    public function fetch_markets($params = array ()) {
        return Async\async(function () use ($params) {
            // {
            //     "result" => {
            //         "assets" => array(
            //             {
            //                 "assetId" => 1,
            //                 "symbol" => "BTC",
            //                 "decimals" => 8,
            //                 "displayDecimals" => 5,
            //                 "transactionExplorer" => "https://mempool.space/tx/array()",
            //                 "addressExplorer" => "https://mempool.space/address/array()",
            //                 "settles" => true,
            //                 "assetType" => "Crypto",
            //                 "sourceId" => 1,
            //                 "metadata" => {
            //                     "asset" => array(
            //                         "dustAmount" => 3000
            //                     ),
            //                     "source" => array(
            //                         "network" => "Mainnet",
            //                         "scope" => "bitcoin",
            //                         "type" => "mainnet"
            //                     }
            //                 }
            //             ),
            //         <array truncated>
            //         ),
            //         "markets" => array(
            //             {
            //                 "symbol" => "ETHBTC",
            //                 "marketId" => 100001,
            //                 "baseAssetId" => 2,
            //                 "baseLotSize" => "0x0000000000000000000000000000000000038d7ea4c68000",
            //                 "quoteAssetId" => 1,
            //                 "quoteLotSize" => "0x000000000000000000000000000000000000000000000001",
            //                 "priceDisplayDecimals" => 5,
            //                 "protectionPriceLevels" => 1000,
            //                 "priceTickSize" => "0.00001",
            //                 "quantityTickSize" => "0.001"
            //             }
            //          <array truncated>
            //         )
            //     }
            // }
            $response = Async\await($this->publicGetIrV0Markets ());
            $markets = $response['markets'];
            $assets = $response['assets'];
            $result = array();
            for ($i = 0; $i < count($markets); $i++) {
                $market = $markets[$i];
                // check if baseStr is null
                $base = $this->safe_string($assets, $market->baseAssetId);
                $quote = $this->safe_string($assets, $market->quoteAssetId);
                $symbol = $market->symbol;
                $result[] = array(
                    'id' => $this->safe_integer($market, 'marketId'),
                    'uppercaseId' => null,
                    'symbol' => $symbol,
                    'base' => $base,
                    'baseId' => $this->safe_integer($market, $market->baseAssetId),
                    'quote' => $quote,
                    'quoteId' => $this->safe_integer($market, $market->quoteAssetId),
                    'settle' => null,
                    'settleId' => null,
                    'type' => 'spot',
                    'spot' => true,
                    'margin' => false,
                    'swap' => false,
                    'future' => false,
                    'option' => false,
                    'derivative' => false,
                    'contract' => false,
                    'linear' => null,
                    'inverse' => null,
                    'contractSize' => null,
                    'expiry' => null,
                    'expiryDatetime' => null,
                    'strike' => null,
                    'optionType' => null,
                    'limits' => array(
                        'amount' => array(
                            'min' => $this->safe_number($market, 'minLimitBaseAmount'),
                            'max' => $this->safe_number($market, 'maxLimitBaseAmount'),
                        ),
                        'price' => array(
                            'min' => null,
                            'max' => null,
                        ),
                        'cost' => array(
                            'min' => null,
                            'max' => null,
                        ),
                        'leverage' => array(
                            'min' => null,
                            'max' => null,
                        ),
                    ),
                    'precision' => array(
                        'price' => $this->parse_number($this->parse_precision($this->safe_string($market, 'quotePrecision'))),
                        'amount' => $this->parse_number($this->parse_precision($this->safe_string($market, 'basePrecision'))),
                    ),
                    'active' => null,
                    'created' => null,
                    'info' => $market,
                );
            }
            return $result;
        }) ();
    }

    public function fetch_assets() {
        return Async\async(function ()  {
            $response = Async\await($this->publicGetIrV0Markets ());
            $assets = $response['markets'];
            $result = array();
            for ($i = 0; $i < count($assets); $i++) {
                // TODO => properly parse $assets
                $asset = $assets[$i];
                $result[] = $asset;
            }
            return false;
        }) ();
    }
}
